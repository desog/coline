
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 22 01:38:23 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import TablaSimbolos.Simbolo;
import ast.expresiones.Exp;
import ast.expresiones.Literal;
import ast.expresiones.operaciones.Aritmeticas;
import ast.instrucciones.Asignacion;
import ast.expresiones.Identificador;
import ast.instrucciones.Bloque;
import ast.instrucciones.Declaracion;
import ast.instrucciones.Ins;
import ast.Nodo;
import ast.Ast;
import ast.instrucciones.PrintTabla;
import ast.expresiones.operaciones.Operacion;
import ast.expresiones.operaciones.Relacionales;
import ast.expresiones.operaciones.Logicas;
import ast.expresiones.Tipo;
import ast.expresiones.OpPostfijo;
import ast.instrucciones.Break;
import ast.instrucciones.While;
import ast.expresiones.operaciones.Ternario;
import ast.instrucciones.Print;
import ast.instrucciones.If;
import ast.expresiones.Tipo.Tipos;
import ast.instrucciones.ElseIf;
import ast.instrucciones.ElseIfElse;
import ast.expresiones.OpPrefijo;
import ast.instrucciones.Continue;
import ast.instrucciones.For;
import ast.instrucciones.DoWhile;
import ast.instrucciones.Switch;
import ast.instrucciones.Casos;
import ast.instrucciones.Defecto;
import ast.instrucciones.DeclaArreglo;
import ast.expresiones.OpPrefijoSuma;
import ast.expresiones.Casteo;
import ast.expresiones.Instancia;
import ast.instrucciones.Var;
import Herramientas.ArbolArreglos.Nodon;
import Herramientas.ArbolArreglos.Arreglo;
import ast.instrucciones.AsignacionArreglo;
import ast.expresiones.AccesoArreglo;
import ast.instrucciones.Parametro;
import ast.instrucciones.Modificador;
import ast.instrucciones.Metodo;
import ast.instrucciones.Constructor;
import ast.expresiones.Llamada;
import ast.instrucciones.EncabezadoMetodo;
import ast.instrucciones.Sentencias;
import ast.instrucciones.ForEach;
import ast.expresiones.Retorno;
import ast.expresiones.LeerArchivo;
import ast.instrucciones.Clase;
import ast.expresiones.InstanciaClase;
import ast.instrucciones.Importar;
import ast.expresiones.Acceso;
import ast.expresiones.AccesoIzq;
import ast.expresiones.This;
import ast.instrucciones.DeclaracionGlobal;
import ast.instrucciones.AsignacionAcceso;
import ast.instrucciones.Graficar;
import ast.instrucciones.Super;
import ast.instrucciones.LeerConsola;
import ast.expresiones.Null;
import ast.expresiones.ToChar;
import ast.expresiones.ToInt;
import ast.expresiones.ToDouble;
import ast.expresiones.Str;
import ast.expresiones.EscribirArchivo;
import ast.expresiones.OpPostfijoArreglos;

/** CUP v0.10k generated parser.
  * @version Sat Jun 22 01:38:23 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\332\000\002\002\004\000\002\003\003\000\002\051" +
    "\003\000\002\052\004\000\002\052\003\000\002\052\004" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\005\000\002\055\010\000\002\055\007\000\002" +
    "\057\004\000\002\057\002\000\002\056\003\000\002\061" +
    "\004\000\002\061\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\060\004\000\002\060\003\000\002" +
    "\075\004\000\002\075\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\076\006" +
    "\000\002\076\010\000\002\076\005\000\002\102\006\000" +
    "\002\102\007\000\002\103\004\000\002\103\003\000\002" +
    "\064\011\000\002\064\010\000\002\067\003\000\002\067" +
    "\002\000\002\077\005\000\002\077\003\000\002\070\003" +
    "\000\002\070\004\000\002\071\004\000\002\065\004\000" +
    "\002\065\003\000\002\066\004\000\002\066\003\000\002" +
    "\066\004\000\002\066\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\074\007" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\004\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\120\007\000\002\117\010\000\002\115\011\000\002\110" +
    "\013\000\002\106\005\000\002\106\004\000\002\027\011" +
    "\000\002\030\004\000\002\030\003\000\002\031\006\000" +
    "\002\031\005\000\002\026\013\000\002\023\014\000\002" +
    "\024\003\000\002\024\003\000\002\020\011\000\002\020" +
    "\012\000\002\020\013\000\002\020\012\000\002\022\013" +
    "\000\002\022\012\000\002\021\006\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\006\000\002" +
    "\015\011\000\002\016\004\000\002\025\004\000\002\014" +
    "\007\000\002\014\007\000\002\012\006\000\002\007\006" +
    "\000\002\007\005\000\002\101\005\000\002\040\005\000" +
    "\002\040\003\000\002\040\004\000\002\040\003\000\002" +
    "\041\005\000\002\041\003\000\002\042\004\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\034\005" +
    "\000\002\044\003\000\002\044\003\000\002\045\005\000" +
    "\002\045\003\000\002\045\004\000\002\045\003\000\002" +
    "\046\005\000\002\046\005\000\002\047\003\000\002\047" +
    "\002\000\002\050\005\000\002\050\003\000\002\036\005" +
    "\000\002\036\004\000\002\013\006\000\002\013\007\000" +
    "\002\114\005\000\002\114\007\000\002\114\005\000\002" +
    "\114\007\000\002\114\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\007\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\011\004\000\002\011\003" +
    "\000\002\011\010\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\011\003" +
    "\000\002\011\004\000\002\011\006\000\002\011\004\000" +
    "\002\011\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\006\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\116\006" +
    "\000\002\116\006\000\002\116\006\000\002\116\006\000" +
    "\002\111\005\000\002\111\003\000\002\112\003\000\002" +
    "\112\003\000\002\112\004\000\002\035\004\000\002\035" +
    "\006\000\002\035\005\000\002\037\006\000\002\037\005" +
    "\000\002\032\004\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\107\006\000\002\107\005" +
    "\000\002\104\007\000\002\104\006\000\002\105\005\000" +
    "\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d2\000\024\003\020\076\006\077\015\100\013\101" +
    "\012\102\007\103\017\104\023\105\022\001\002\000\036" +
    "\011\ufff3\012\ufff3\013\ufff3\041\ufff3\042\ufff3\045\ufff3\075" +
    "\ufff3\076\006\077\015\100\013\101\012\102\007\103\017" +
    "\105\ufff3\001\002\000\026\002\ufffd\003\ufffd\076\ufffd\077" +
    "\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd" +
    "\001\002\000\036\011\ufff0\012\ufff0\013\ufff0\041\ufff0\042" +
    "\ufff0\045\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0" +
    "\102\ufff0\103\ufff0\105\ufff0\001\002\000\036\011\uffec\012" +
    "\uffec\013\uffec\041\uffec\042\uffec\045\uffec\075\uffec\076\uffec" +
    "\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\105\uffec\001" +
    "\002\000\004\105\u01c4\001\002\000\036\011\ufff1\012\ufff1" +
    "\013\ufff1\041\ufff1\042\ufff1\045\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\105\ufff1\001\002" +
    "\000\036\011\uffed\012\uffed\013\uffed\041\uffed\042\uffed\045" +
    "\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed" +
    "\103\uffed\105\uffed\001\002\000\036\011\uffee\012\uffee\013" +
    "\uffee\041\uffee\042\uffee\045\uffee\075\uffee\076\uffee\077\uffee" +
    "\100\uffee\101\uffee\102\uffee\103\uffee\105\uffee\001\002\000" +
    "\026\002\ufff9\003\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9" +
    "\102\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000\036\011" +
    "\uffef\012\uffef\013\uffef\041\uffef\042\uffef\045\uffef\075\uffef" +
    "\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef\105" +
    "\uffef\001\002\000\004\002\u01d3\001\002\000\036\011\uffeb" +
    "\012\uffeb\013\uffeb\041\uffeb\042\uffeb\045\uffeb\075\uffeb\076" +
    "\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\105\uffeb" +
    "\001\002\000\026\002\ufffb\003\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\001\002" +
    "\000\026\002\uffff\003\u01d2\076\006\077\015\100\013\101" +
    "\012\102\007\103\017\104\023\105\022\001\002\000\004" +
    "\011\030\001\002\000\004\040\026\001\002\000\026\002" +
    "\ufffa\003\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa" +
    "\103\ufffa\104\ufffa\105\ufffa\001\002\000\004\002\000\001" +
    "\002\000\004\014\027\001\002\000\026\002\ufff8\003\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104" +
    "\ufff8\105\ufff8\001\002\000\006\006\ufff4\106\032\001\002" +
    "\000\004\006\034\001\002\000\004\011\033\001\002\000" +
    "\004\006\ufff5\001\002\000\042\007\051\011\056\012\053" +
    "\013\035\041\036\042\042\045\041\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\107\054" +
    "\001\002\000\010\003\uff31\011\uff31\072\uff31\001\002\000" +
    "\010\003\uff33\011\uff33\072\uff33\001\002\000\022\011\u01c5" +
    "\012\053\013\035\041\036\042\042\045\041\075\055\105" +
    "\u01c4\001\002\000\010\003\u0127\011\u01c0\072\074\001\002" +
    "\000\010\003\uff30\011\uff30\072\uff30\001\002\000\010\003" +
    "\uff32\011\uff32\072\uff32\001\002\000\042\007\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\041\uffe6\042\uffe6\045\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\105\uffe6" +
    "\107\uffe6\001\002\000\114\002\ufff6\003\ufff6\007\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\015\ufff6\041\ufff6\042\ufff6\045\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\055\ufff6\056\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105" +
    "\ufff6\107\ufff6\111\ufff6\113\ufff6\116\ufff6\123\ufff6\124\ufff6" +
    "\125\ufff6\001\002\000\042\007\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\041\uffe7\042\uffe7\045\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\103\uffe7\105\uffe7\107\uffe7\001" +
    "\002\000\042\007\uffe5\011\uffe5\012\uffe5\013\uffe5\041\uffe5" +
    "\042\uffe5\045\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101" +
    "\uffe5\102\uffe5\103\uffe5\105\uffe5\107\uffe5\001\002\000\042" +
    "\007\uffe4\011\uffe4\012\uffe4\013\uffe4\041\uffe4\042\uffe4\045" +
    "\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4" +
    "\103\uffe4\105\uffe4\107\uffe4\001\002\000\042\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\041\uffe3\042\uffe3\045\uffe3\075\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\105" +
    "\uffe3\107\uffe3\001\002\000\114\002\uffe9\003\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\015\uffe9\041\uffe9\042\uffe9\045" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\055\uffe9\056\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9" +
    "\105\uffe9\107\uffe9\111\uffe9\113\uffe9\116\uffe9\123\uffe9\124" +
    "\uffe9\125\uffe9\001\002\000\042\007\u01bf\011\056\012\053" +
    "\013\035\041\036\042\042\045\041\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\107\054" +
    "\001\002\000\010\003\uff34\011\uff34\072\uff34\001\002\000" +
    "\004\110\u01ad\001\002\000\010\003\uff2f\011\uff2f\072\uff2f" +
    "\001\002\000\012\003\uff2e\011\uff2e\016\057\072\uff2e\001" +
    "\002\000\024\011\066\012\053\013\035\017\uffd8\041\036" +
    "\042\042\045\041\075\055\102\060\001\002\000\020\011" +
    "\066\012\053\013\035\041\036\042\042\045\041\075\055" +
    "\001\002\000\004\017\100\001\002\000\004\011\072\001" +
    "\002\000\006\017\uffd5\070\uffd5\001\002\000\006\017\uffd6" +
    "\070\uffd6\001\002\000\006\017\uffd9\070\067\001\002\000" +
    "\010\003\uff2e\011\uff2e\072\uff2e\001\002\000\022\011\066" +
    "\012\053\013\035\041\036\042\042\045\041\075\055\102" +
    "\060\001\002\000\006\017\uffd7\070\uffd7\001\002\000\006" +
    "\017\uffd3\070\uffd3\001\002\000\020\003\uff8a\010\uff8a\014" +
    "\uff8a\017\uff8a\054\uff8a\070\uff8a\072\074\001\002\000\020" +
    "\003\uff8b\010\uff8b\014\uff8b\017\uff8b\054\uff8b\070\uff8b\072" +
    "\076\001\002\000\004\073\075\001\002\000\022\003\uff79" +
    "\010\uff79\011\uff79\014\uff79\017\uff79\054\uff79\070\uff79\072" +
    "\uff79\001\002\000\004\073\077\001\002\000\022\003\uff7a" +
    "\010\uff7a\011\uff7a\014\uff7a\017\uff7a\054\uff7a\070\uff7a\072" +
    "\uff7a\001\002\000\004\006\101\001\002\000\102\003\137" +
    "\007\155\011\116\012\053\013\035\015\144\041\036\042" +
    "\042\045\041\050\154\051\127\052\107\055\125\056\123" +
    "\060\136\061\103\062\152\063\122\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\111\160" +
    "\113\115\116\121\123\145\124\132\125\114\001\002\000" +
    "\042\007\uffda\011\uffda\012\uffda\013\uffda\041\uffda\042\uffda" +
    "\045\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102" +
    "\uffda\103\uffda\105\uffda\107\uffda\001\002\000\004\014\u01ab" +
    "\001\002\000\106\003\uffc6\007\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\015\uffc6\041\uffc6\042\uffc6\045\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\105\uffc6\111\uffc6\113\uffc6\116" +
    "\uffc6\123\uffc6\124\uffc6\125\uffc6\001\002\000\106\003\uffba" +
    "\007\uffba\011\uffba\012\uffba\013\uffba\015\uffba\041\uffba\042" +
    "\uffba\045\uffba\050\uffba\051\uffba\052\uffba\055\uffba\056\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba" +
    "\105\uffba\111\uffba\113\uffba\116\uffba\123\uffba\124\uffba\125" +
    "\uffba\001\002\000\106\003\uffc9\007\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\015\uffc9\041\uffc9\042\uffc9\045\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\105\uffc9\111\uffc9\113\uffc9" +
    "\116\uffc9\123\uffc9\124\uffc9\125\uffc9\001\002\000\004\016" +
    "\u01a7\001\002\000\006\003\u0127\011\072\001\002\000\106" +
    "\003\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\041" +
    "\uffc4\042\uffc4\045\uffc4\050\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\056\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\105\uffc4\111\uffc4\113\uffc4\116\uffc4\123\uffc4\124" +
    "\uffc4\125\uffc4\001\002\000\106\003\uffc0\007\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\015\uffc0\041\uffc0\042\uffc0\045\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\105\uffc0\111\uffc0" +
    "\113\uffc0\116\uffc0\123\uffc0\124\uffc0\125\uffc0\001\002\000" +
    "\106\003\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\041\uffcb\042\uffcb\045\uffcb\050\uffcb\051\uffcb\052\uffcb\055" +
    "\uffcb\056\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\105\uffcb\111\uffcb\113\uffcb\116\uffcb\123\uffcb" +
    "\124\uffcb\125\uffcb\001\002\000\004\016\u01a0\001\002\000" +
    "\004\114\u019c\001\002\000\022\003\uff2e\010\u0112\011\uff2e" +
    "\016\u018c\046\u018b\047\u018d\072\223\114\u0189\001\002\000" +
    "\106\003\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8" +
    "\041\uffb8\042\uffb8\045\uffb8\050\uffb8\051\uffb8\052\uffb8\055" +
    "\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102" +
    "\uffb8\103\uffb8\105\uffb8\111\uffb8\113\uffb8\116\uffb8\123\uffb8" +
    "\124\uffb8\125\uffb8\001\002\000\106\003\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\015\uffb6\041\uffb6\042\uffb6\045\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\055\uffb6\056\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\105\uffb6\111" +
    "\uffb6\113\uffb6\116\uffb6\123\uffb6\124\uffb6\125\uffb6\001\002" +
    "\000\004\016\u0183\001\002\000\004\016\u0174\001\002\000" +
    "\004\016\u0170\001\002\000\106\003\uffb7\007\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\015\uffb7\041\uffb7\042\uffb7\045\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\105\uffb7\111\uffb7" +
    "\113\uffb7\116\uffb7\123\uffb7\124\uffb7\125\uffb7\001\002\000" +
    "\004\016\u0154\001\002\000\106\003\uffc3\007\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\015\uffc3\041\uffc3\042\uffc3\045\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\105\uffc3\111\uffc3" +
    "\113\uffc3\116\uffc3\123\uffc3\124\uffc3\125\uffc3\001\002\000" +
    "\004\016\u014e\001\002\000\106\003\uffbf\007\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\015\uffbf\041\uffbf\042\uffbf\045\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\075\uffbf\076\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\105\uffbf\111\uffbf" +
    "\113\uffbf\116\uffbf\123\uffbf\124\uffbf\125\uffbf\001\002\000" +
    "\106\003\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5" +
    "\041\uffb5\042\uffb5\045\uffb5\050\uffb5\051\uffb5\052\uffb5\055" +
    "\uffb5\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\105\uffb5\111\uffb5\113\uffb5\116\uffb5\123\uffb5" +
    "\124\uffb5\125\uffb5\001\002\000\004\016\u014a\001\002\000" +
    "\004\114\u0148\001\002\000\106\003\uffc1\007\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\041\uffc1\042\uffc1\045\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\075\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\105\uffc1\111\uffc1" +
    "\113\uffc1\116\uffc1\123\uffc1\124\uffc1\125\uffc1\001\002\000" +
    "\106\003\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc" +
    "\041\uffcc\042\uffcc\045\uffcc\050\uffcc\051\uffcc\052\uffcc\055" +
    "\uffcc\056\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102" +
    "\uffcc\103\uffcc\105\uffcc\111\uffcc\113\uffcc\116\uffcc\123\uffcc" +
    "\124\uffcc\125\uffcc\001\002\000\004\016\u0109\001\002\000" +
    "\104\007\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\041\uffcd" +
    "\042\uffcd\045\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\056" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103" +
    "\uffcd\105\uffcd\111\uffcd\113\uffcd\116\uffcd\123\uffcd\124\uffcd" +
    "\125\uffcd\001\002\000\106\003\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\015\uffc2\041\uffc2\042\uffc2\045\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\105\uffc2\111\uffc2\113" +
    "\uffc2\116\uffc2\123\uffc2\124\uffc2\125\uffc2\001\002\000\106" +
    "\003\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\041" +
    "\uffc5\042\uffc5\045\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5" +
    "\056\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\105\uffc5\111\uffc5\113\uffc5\116\uffc5\123\uffc5\124" +
    "\uffc5\125\uffc5\001\002\000\106\003\uffbd\007\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\015\uffbd\041\uffbd\042\uffbd\045\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\105\uffbd\111\uffbd" +
    "\113\uffbd\116\uffbd\123\uffbd\124\uffbd\125\uffbd\001\002\000" +
    "\106\003\u0108\007\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\041\uffcf\042\uffcf\045\uffcf\050\uffcf\051\uffcf\052\uffcf\055" +
    "\uffcf\056\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\105\uffcf\111\uffcf\113\uffcf\116\uffcf\123\uffcf" +
    "\124\uffcf\125\uffcf\001\002\000\004\016\u0105\001\002\000" +
    "\004\016\u0101\001\002\000\100\007\u0100\011\116\012\053" +
    "\013\035\015\144\041\036\042\042\045\041\050\154\051" +
    "\127\052\107\055\125\056\123\060\136\061\103\062\152" +
    "\063\122\075\055\076\006\077\015\100\013\101\012\102" +
    "\007\103\017\105\022\111\160\113\115\116\121\123\145" +
    "\124\132\125\114\001\002\000\106\003\uffca\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\015\uffca\041\uffca\042\uffca\045\uffca" +
    "\050\uffca\051\uffca\052\uffca\055\uffca\056\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\105\uffca\111" +
    "\uffca\113\uffca\116\uffca\123\uffca\124\uffca\125\uffca\001\002" +
    "\000\106\003\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\015" +
    "\uffc7\041\uffc7\042\uffc7\045\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\055\uffc7\056\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\103\uffc7\105\uffc7\111\uffc7\113\uffc7\116\uffc7\123" +
    "\uffc7\124\uffc7\125\uffc7\001\002\000\106\003\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\015\uffbc\041\uffbc\042\uffbc\045" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\055\uffbc\056\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\105\uffbc" +
    "\111\uffbc\113\uffbc\116\uffbc\123\uffbc\124\uffbc\125\uffbc\001" +
    "\002\000\004\006\367\001\002\000\004\014\366\001\002" +
    "\000\004\014\365\001\002\000\042\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\041\uffd1\042\uffd1\045\uffd1\075\uffd1\076\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\105\uffd1\107" +
    "\uffd1\001\002\000\106\003\uffbb\007\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\015\uffbb\041\uffbb\042\uffbb\045\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\075\uffbb\076\uffbb\077\uffbb\100" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\105\uffbb\111\uffbb\113\uffbb" +
    "\116\uffbb\123\uffbb\124\uffbb\125\uffbb\001\002\000\106\003" +
    "\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\041\uffbe" +
    "\042\uffbe\045\uffbe\050\uffbe\051\uffbe\052\uffbe\055\uffbe\056" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103" +
    "\uffbe\105\uffbe\111\uffbe\113\uffbe\116\uffbe\123\uffbe\124\uffbe" +
    "\125\uffbe\001\002\000\056\004\167\005\174\011\212\014" +
    "\171\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\054\004\167\005\174\011\212\016\205\021\176\036" +
    "\165\037\163\040\162\043\200\044\207\046\172\047\203" +
    "\067\202\074\210\112\170\113\213\115\177\117\206\120" +
    "\204\121\164\122\201\001\002\000\056\003\uff58\007\uff58" +
    "\014\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024" +
    "\uff58\026\uff58\027\uff58\030\uff58\031\uff58\032\uff58\033\uff58" +
    "\034\uff58\035\uff58\053\uff58\054\uff58\066\uff58\070\uff58\073" +
    "\uff58\001\002\000\056\003\uff57\007\uff57\014\uff57\017\uff57" +
    "\020\uff57\021\uff57\022\uff57\023\uff57\024\uff57\026\uff57\027" +
    "\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57" +
    "\053\uff57\054\uff57\066\uff57\070\uff57\073\uff57\001\002\000" +
    "\004\016\361\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\056\003\uff4d\007\uff4d\014\uff4d\017\uff4d\020\uff4d\021\uff4d" +
    "\022\uff4d\023\uff4d\024\uff4d\026\uff4d\027\uff4d\030\uff4d\031" +
    "\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\053\uff4d\054\uff4d" +
    "\066\uff4d\070\uff4d\073\uff4d\001\002\000\056\003\uff5a\007" +
    "\uff5a\014\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023\uff5a" +
    "\024\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a\032\uff5a\033" +
    "\uff5a\034\uff5a\035\uff5a\053\uff5a\054\uff5a\066\uff5a\070\uff5a" +
    "\073\uff5a\001\002\000\004\016\355\001\002\000\106\003" +
    "\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\041\uffaf" +
    "\042\uffaf\045\uffaf\050\uffaf\051\uffaf\052\uffaf\055\uffaf\056" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103" +
    "\uffaf\105\uffaf\111\uffaf\113\uffaf\116\uffaf\123\uffaf\124\uffaf" +
    "\125\uffaf\001\002\000\004\011\354\001\002\000\042\014" +
    "\353\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\227\034\231\035" +
    "\235\053\237\066\236\001\002\000\056\003\uff59\007\uff59" +
    "\014\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024" +
    "\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59\033\uff59" +
    "\034\uff59\035\uff59\053\uff59\054\uff59\066\uff59\070\uff59\073" +
    "\uff59\001\002\000\056\003\uff4e\007\uff4e\014\uff4e\017\uff4e" +
    "\020\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\026\uff4e\027" +
    "\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e" +
    "\053\uff4e\054\uff4e\066\uff4e\070\uff4e\073\uff4e\001\002\000" +
    "\054\004\167\005\174\011\212\016\205\021\176\036\165" +
    "\037\163\040\162\043\200\044\207\046\172\047\203\067" +
    "\202\074\210\112\170\113\213\115\177\117\206\120\204" +
    "\121\164\122\201\001\002\000\056\003\uff60\007\uff60\014" +
    "\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60" +
    "\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034" +
    "\uff60\035\uff60\053\uff60\054\uff60\066\uff60\070\uff60\073\uff60" +
    "\001\002\000\056\003\uff56\007\uff56\014\uff56\017\uff56\020" +
    "\uff56\021\uff56\022\uff56\023\uff56\024\uff56\026\uff56\027\uff56" +
    "\030\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\053" +
    "\uff56\054\uff56\066\uff56\070\uff56\073\uff56\001\002\000\004" +
    "\016\347\001\002\000\004\016\342\001\002\000\004\011" +
    "\341\001\002\000\004\016\336\001\002\000\062\004\167" +
    "\005\174\011\212\012\330\013\325\016\205\021\176\036" +
    "\165\037\163\040\162\041\326\043\200\044\207\046\172" +
    "\047\203\067\202\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\004\016\322" +
    "\001\002\000\056\003\uff55\007\uff55\014\uff55\017\uff55\020" +
    "\uff55\021\uff55\022\uff55\023\uff55\024\uff55\026\uff55\027\uff55" +
    "\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55\053" +
    "\uff55\054\uff55\066\uff55\070\uff55\073\uff55\001\002\000\020" +
    "\011\314\012\053\013\035\041\036\042\042\045\041\075" +
    "\055\001\002\000\060\003\uff47\007\uff47\014\uff47\017\uff47" +
    "\020\uff47\021\uff47\022\uff47\023\uff47\024\uff47\026\uff47\027" +
    "\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47" +
    "\053\uff47\054\uff47\066\uff47\070\uff47\073\uff47\114\310\001" +
    "\002\000\070\003\uff53\007\uff53\014\uff53\016\222\017\uff53" +
    "\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\026\uff53\027" +
    "\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035\uff53" +
    "\046\303\047\304\053\uff53\054\uff53\066\uff53\070\uff53\072" +
    "\223\073\uff53\114\301\001\002\000\060\003\uff48\007\uff48" +
    "\014\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023\uff48\024" +
    "\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48" +
    "\034\uff48\035\uff48\053\uff48\054\uff48\066\uff48\070\uff48\073" +
    "\uff48\114\214\001\002\000\004\011\216\001\002\000\060" +
    "\003\uff4a\007\uff4a\014\uff4a\017\uff4a\020\uff4a\021\uff4a\022" +
    "\uff4a\023\uff4a\024\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a" +
    "\032\uff4a\033\uff4a\034\uff4a\035\uff4a\053\uff4a\054\uff4a\066" +
    "\uff4a\070\uff4a\073\uff4a\114\277\001\002\000\066\003\uff40" +
    "\007\uff40\010\uff40\014\uff40\016\222\017\uff40\020\uff40\021" +
    "\uff40\022\uff40\023\uff40\024\uff40\026\uff40\027\uff40\030\uff40" +
    "\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\053\uff40\054" +
    "\uff40\066\uff40\070\uff40\072\223\073\uff40\114\uff40\001\002" +
    "\000\062\003\uff3f\007\uff3f\010\uff3f\014\uff3f\017\uff3f\020" +
    "\uff3f\021\uff3f\022\uff3f\023\uff3f\024\uff3f\026\uff3f\027\uff3f" +
    "\030\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\053" +
    "\uff3f\054\uff3f\066\uff3f\070\uff3f\073\uff3f\114\uff3f\001\002" +
    "\000\062\003\uff41\007\uff41\010\uff41\014\uff41\017\uff41\020" +
    "\uff41\021\uff41\022\uff41\023\uff41\024\uff41\026\uff41\027\uff41" +
    "\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41\053" +
    "\uff41\054\uff41\066\uff41\070\uff41\073\uff41\114\uff41\001\002" +
    "\000\064\003\uff3e\007\uff3e\010\uff3e\014\uff3e\017\uff3e\020" +
    "\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\026\uff3e\027\uff3e" +
    "\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\053" +
    "\uff3e\054\uff3e\066\uff3e\070\uff3e\072\274\073\uff3e\114\uff3e" +
    "\001\002\000\056\004\167\005\174\011\212\016\205\017" +
    "\270\021\176\036\165\037\163\040\162\043\200\044\207" +
    "\046\172\047\203\067\202\074\210\112\170\113\213\115" +
    "\177\117\206\120\204\121\164\122\201\001\002\000\054" +
    "\004\167\005\174\011\212\016\205\021\176\036\165\037" +
    "\163\040\162\043\200\044\207\046\172\047\203\067\202" +
    "\074\210\112\170\113\213\115\177\117\206\120\204\121" +
    "\164\122\201\001\002\000\042\020\243\021\230\022\241" +
    "\023\225\024\232\026\233\027\244\030\226\031\242\032" +
    "\234\033\227\034\231\035\235\053\237\066\236\073\240" +
    "\001\002\000\054\004\167\005\174\011\212\016\205\021" +
    "\176\036\165\037\163\040\162\043\200\044\207\046\172" +
    "\047\203\067\202\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\054\004\167" +
    "\005\174\011\212\016\205\021\176\036\165\037\163\040" +
    "\162\043\200\044\207\046\172\047\203\067\202\074\210" +
    "\112\170\113\213\115\177\117\206\120\204\121\164\122" +
    "\201\001\002\000\054\004\167\005\174\011\212\016\205" +
    "\021\176\036\165\037\163\040\162\043\200\044\207\046" +
    "\172\047\203\067\202\074\210\112\170\113\213\115\177" +
    "\117\206\120\204\121\164\122\201\001\002\000\054\004" +
    "\167\005\174\011\212\016\205\021\176\036\165\037\163" +
    "\040\162\043\200\044\207\046\172\047\203\067\202\074" +
    "\210\112\170\113\213\115\177\117\206\120\204\121\164" +
    "\122\201\001\002\000\054\004\167\005\174\011\212\016" +
    "\205\021\176\036\165\037\163\040\162\043\200\044\207" +
    "\046\172\047\203\067\202\074\210\112\170\113\213\115" +
    "\177\117\206\120\204\121\164\122\201\001\002\000\054" +
    "\004\167\005\174\011\212\016\205\021\176\036\165\037" +
    "\163\040\162\043\200\044\207\046\172\047\203\067\202" +
    "\074\210\112\170\113\213\115\177\117\206\120\204\121" +
    "\164\122\201\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\054\004\167\005\174\011\212\016\205\021\176\036\165" +
    "\037\163\040\162\043\200\044\207\046\172\047\203\067" +
    "\202\074\210\112\170\113\213\115\177\117\206\120\204" +
    "\121\164\122\201\001\002\000\054\004\167\005\174\011" +
    "\212\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\054\004\167\005\174\011\212\016\205\021\176\036" +
    "\165\037\163\040\162\043\200\044\207\046\172\047\203" +
    "\067\202\074\210\112\170\113\213\115\177\117\206\120" +
    "\204\121\164\122\201\001\002\000\054\004\167\005\174" +
    "\011\212\016\205\021\176\036\165\037\163\040\162\043" +
    "\200\044\207\046\172\047\203\067\202\074\210\112\170" +
    "\113\213\115\177\117\206\120\204\121\164\122\201\001" +
    "\002\000\070\003\uff39\007\uff39\010\uff39\014\uff39\017\uff39" +
    "\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\026\uff39\027" +
    "\uff39\030\uff39\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39" +
    "\046\uff39\047\uff39\053\uff39\054\uff39\066\uff39\070\uff39\072" +
    "\uff39\073\uff39\114\uff39\001\002\000\054\004\167\005\174" +
    "\011\212\016\205\021\176\036\165\037\163\040\162\043" +
    "\200\044\207\046\172\047\203\067\202\074\210\112\170" +
    "\113\213\115\177\117\206\120\204\121\164\122\201\001" +
    "\002\000\054\004\167\005\174\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\054\004\167\005" +
    "\174\011\212\016\205\021\176\036\165\037\163\040\162" +
    "\043\200\044\207\046\172\047\203\067\202\074\210\112" +
    "\170\113\213\115\177\117\206\120\204\121\164\122\201" +
    "\001\002\000\054\004\167\005\174\011\212\016\205\021" +
    "\176\036\165\037\163\040\162\043\200\044\207\046\172" +
    "\047\203\067\202\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\056\003\uff6c" +
    "\007\uff6c\014\uff6c\017\uff6c\020\243\021\230\022\241\023" +
    "\225\024\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c" +
    "\033\uff6c\034\uff6c\035\uff6c\053\uff6c\054\uff6c\066\236\070" +
    "\uff6c\073\uff6c\001\002\000\056\003\uff71\007\uff71\014\uff71" +
    "\017\uff71\020\uff71\021\uff71\022\241\023\225\024\uff71\026" +
    "\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\053\uff71\054\uff71\066\236\070\uff71\073\uff71\001" +
    "\002\000\056\003\uff64\007\uff64\014\uff64\017\uff64\020\243" +
    "\021\230\022\241\023\225\024\uff64\026\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\053\uff64" +
    "\054\uff64\066\236\070\uff64\073\uff64\001\002\000\056\003" +
    "\uff6f\007\uff6f\014\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\024\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\034\uff6f\035\uff6f\053\uff6f\054\uff6f\066\uff6f" +
    "\070\uff6f\073\uff6f\001\002\000\042\020\243\021\230\022" +
    "\241\023\225\024\232\026\233\027\244\030\226\031\242" +
    "\032\234\033\227\034\231\035\235\053\237\054\252\066" +
    "\236\001\002\000\054\004\167\005\174\011\212\016\205" +
    "\021\176\036\165\037\163\040\162\043\200\044\207\046" +
    "\172\047\203\067\202\074\210\112\170\113\213\115\177" +
    "\117\206\120\204\121\164\122\201\001\002\000\056\003" +
    "\uff69\007\uff69\014\uff69\017\uff69\020\243\021\230\022\241" +
    "\023\225\024\232\026\233\027\244\030\226\031\242\032" +
    "\234\033\227\034\231\035\235\053\237\054\uff69\066\236" +
    "\070\uff69\073\uff69\001\002\000\056\003\uff6d\007\uff6d\014" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\035\uff6d\053\uff6d\054\uff6d\066\uff6d\070\uff6d\073\uff6d" +
    "\001\002\000\056\003\uff6b\007\uff6b\014\uff6b\017\uff6b\020" +
    "\243\021\230\022\241\023\225\024\uff6b\026\233\027\244" +
    "\030\226\031\242\032\uff6b\033\uff6b\034\uff6b\035\uff6b\053" +
    "\uff6b\054\uff6b\066\236\070\uff6b\073\uff6b\001\002\000\056" +
    "\003\uff6a\007\uff6a\014\uff6a\017\uff6a\020\243\021\230\022" +
    "\241\023\225\024\uff6a\026\233\027\244\030\226\031\242" +
    "\032\uff6a\033\uff6a\034\uff6a\035\uff6a\053\uff6a\054\uff6a\066" +
    "\236\070\uff6a\073\uff6a\001\002\000\056\003\uff65\007\uff65" +
    "\014\uff65\017\uff65\020\243\021\230\022\241\023\225\024" +
    "\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65" +
    "\034\uff65\035\uff65\053\uff65\054\uff65\066\236\070\uff65\073" +
    "\uff65\001\002\000\056\003\uff68\007\uff68\014\uff68\017\uff68" +
    "\020\243\021\230\022\241\023\225\024\uff68\026\233\027" +
    "\244\030\226\031\242\032\234\033\uff68\034\uff68\035\235" +
    "\053\uff68\054\uff68\066\236\070\uff68\073\uff68\001\002\000" +
    "\056\003\uff67\007\uff67\014\uff67\017\uff67\020\243\021\230" +
    "\022\241\023\225\024\232\026\233\027\244\030\226\031" +
    "\242\032\234\033\uff67\034\uff67\035\235\053\uff67\054\uff67" +
    "\066\236\070\uff67\073\uff67\001\002\000\056\003\uff70\007" +
    "\uff70\014\uff70\017\uff70\020\uff70\021\uff70\022\241\023\225" +
    "\024\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033" +
    "\uff70\034\uff70\035\uff70\053\uff70\054\uff70\066\236\070\uff70" +
    "\073\uff70\001\002\000\056\003\uff66\007\uff66\014\uff66\017" +
    "\uff66\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\uff66\034\231\035" +
    "\235\053\uff66\054\uff66\066\236\070\uff66\073\uff66\001\002" +
    "\000\056\003\uff63\007\uff63\014\uff63\017\uff63\020\243\021" +
    "\230\022\241\023\225\024\uff63\026\uff63\027\uff63\030\uff63" +
    "\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63\053\uff63\054" +
    "\uff63\066\236\070\uff63\073\uff63\001\002\000\056\003\uff6e" +
    "\007\uff6e\014\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023" +
    "\uff6e\024\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\053\uff6e\054\uff6e\066\uff6e\070" +
    "\uff6e\073\uff6e\001\002\000\044\017\uff28\020\243\021\230" +
    "\022\241\023\225\024\232\026\233\027\244\030\226\031" +
    "\242\032\234\033\227\034\231\035\235\053\237\066\236" +
    "\070\uff28\001\002\000\006\017\271\070\272\001\002\000" +
    "\062\003\uff2c\007\uff2c\010\uff2c\014\uff2c\017\uff2c\020\uff2c" +
    "\021\uff2c\022\uff2c\023\uff2c\024\uff2c\026\uff2c\027\uff2c\030" +
    "\uff2c\031\uff2c\032\uff2c\033\uff2c\034\uff2c\035\uff2c\053\uff2c" +
    "\054\uff2c\066\uff2c\070\uff2c\073\uff2c\114\uff2c\001\002\000" +
    "\062\003\uff2d\007\uff2d\010\uff2d\014\uff2d\017\uff2d\020\uff2d" +
    "\021\uff2d\022\uff2d\023\uff2d\024\uff2d\026\uff2d\027\uff2d\030" +
    "\uff2d\031\uff2d\032\uff2d\033\uff2d\034\uff2d\035\uff2d\053\uff2d" +
    "\054\uff2d\066\uff2d\070\uff2d\073\uff2d\114\uff2d\001\002\000" +
    "\054\004\167\005\174\011\212\016\205\021\176\036\165" +
    "\037\163\040\162\043\200\044\207\046\172\047\203\067" +
    "\202\074\210\112\170\113\213\115\177\117\206\120\204" +
    "\121\164\122\201\001\002\000\044\017\uff29\020\243\021" +
    "\230\022\241\023\225\024\232\026\233\027\244\030\226" +
    "\031\242\032\234\033\227\034\231\035\235\053\237\066" +
    "\236\070\uff29\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\042\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\227\034\231\035" +
    "\235\053\237\066\236\073\276\001\002\000\070\003\uff3a" +
    "\007\uff3a\010\uff3a\014\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a" +
    "\032\uff3a\033\uff3a\034\uff3a\035\uff3a\046\uff3a\047\uff3a\053" +
    "\uff3a\054\uff3a\066\uff3a\070\uff3a\072\uff3a\073\uff3a\114\uff3a" +
    "\001\002\000\004\011\216\001\002\000\062\003\uff42\007" +
    "\uff42\010\uff42\014\uff42\017\uff42\020\uff42\021\uff42\022\uff42" +
    "\023\uff42\024\uff42\026\uff42\027\uff42\030\uff42\031\uff42\032" +
    "\uff42\033\uff42\034\uff42\035\uff42\053\uff42\054\uff42\066\uff42" +
    "\070\uff42\073\uff42\114\uff42\001\002\000\004\011\216\001" +
    "\002\000\062\003\uff50\007\uff50\014\uff50\017\uff50\020\uff50" +
    "\021\uff50\022\uff50\023\uff50\024\uff50\026\uff50\027\uff50\030" +
    "\uff50\031\uff50\032\uff50\033\uff50\034\uff50\035\uff50\053\uff50" +
    "\054\uff50\066\uff50\070\uff50\072\274\073\uff50\114\305\001" +
    "\002\000\056\003\uff5e\007\uff5e\014\uff5e\017\uff5e\020\uff5e" +
    "\021\uff5e\022\uff5e\023\uff5e\024\uff5e\026\uff5e\027\uff5e\030" +
    "\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\053\uff5e" +
    "\054\uff5e\066\uff5e\070\uff5e\073\uff5e\001\002\000\056\003" +
    "\uff5d\007\uff5d\014\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d" +
    "\023\uff5d\024\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\053\uff5d\054\uff5d\066\uff5d" +
    "\070\uff5d\073\uff5d\001\002\000\004\011\216\001\002\000" +
    "\060\003\uff4b\007\uff4b\014\uff4b\017\uff4b\020\uff4b\021\uff4b" +
    "\022\uff4b\023\uff4b\024\uff4b\026\uff4b\027\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\053\uff4b\054\uff4b" +
    "\066\uff4b\070\uff4b\073\uff4b\114\277\001\002\000\060\003" +
    "\uff4c\007\uff4c\014\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c" +
    "\023\uff4c\024\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032" +
    "\uff4c\033\uff4c\034\uff4c\035\uff4c\053\uff4c\054\uff4c\066\uff4c" +
    "\070\uff4c\073\uff4c\114\277\001\002\000\004\011\216\001" +
    "\002\000\060\003\uff49\007\uff49\014\uff49\017\uff49\020\uff49" +
    "\021\uff49\022\uff49\023\uff49\024\uff49\026\uff49\027\uff49\030" +
    "\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49\053\uff49" +
    "\054\uff49\066\uff49\070\uff49\073\uff49\114\277\001\002\000" +
    "\004\072\223\001\002\000\056\003\uff52\007\uff52\014\uff52" +
    "\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\026" +
    "\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52\034\uff52" +
    "\035\uff52\053\uff52\054\uff52\066\uff52\070\uff52\073\uff52\001" +
    "\002\000\006\016\315\072\uff2e\001\002\000\056\004\167" +
    "\005\174\011\212\016\205\017\317\021\176\036\165\037" +
    "\163\040\162\043\200\044\207\046\172\047\203\067\202" +
    "\074\210\112\170\113\213\115\177\117\206\120\204\121" +
    "\164\122\201\001\002\000\006\017\320\070\272\001\002" +
    "\000\056\003\uff3b\007\uff3b\014\uff3b\017\uff3b\020\uff3b\021" +
    "\uff3b\022\uff3b\023\uff3b\024\uff3b\026\uff3b\027\uff3b\030\uff3b" +
    "\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\053\uff3b\054" +
    "\uff3b\066\uff3b\070\uff3b\073\uff3b\001\002\000\056\003\uff3c" +
    "\007\uff3c\014\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023" +
    "\uff3c\024\uff3c\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c" +
    "\033\uff3c\034\uff3c\035\uff3c\053\uff3c\054\uff3c\066\uff3c\070" +
    "\uff3c\073\uff3c\001\002\000\060\003\uff3d\007\uff3d\014\uff3d" +
    "\017\uff3d\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\026" +
    "\uff3d\027\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d" +
    "\035\uff3d\053\uff3d\054\uff3d\066\uff3d\070\uff3d\072\274\073" +
    "\uff3d\001\002\000\054\004\167\005\174\011\212\016\205" +
    "\021\176\036\165\037\163\040\162\043\200\044\207\046" +
    "\172\047\203\067\202\074\210\112\170\113\213\115\177" +
    "\117\206\120\204\121\164\122\201\001\002\000\042\017" +
    "\324\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\227\034\231\035" +
    "\235\053\237\066\236\001\002\000\056\003\uff46\007\uff46" +
    "\014\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024" +
    "\uff46\026\uff46\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46" +
    "\034\uff46\035\uff46\053\uff46\054\uff46\066\uff46\070\uff46\073" +
    "\uff46\001\002\000\004\017\335\001\002\000\004\017\334" +
    "\001\002\000\042\017\332\020\243\021\230\022\241\023" +
    "\225\024\232\026\233\027\244\030\226\031\242\032\234" +
    "\033\227\034\231\035\235\053\237\066\236\001\002\000" +
    "\004\017\331\001\002\000\054\004\uff37\005\uff37\011\uff37" +
    "\016\uff37\021\uff37\036\uff37\037\uff37\040\uff37\043\uff37\044" +
    "\uff37\046\uff37\047\uff37\067\uff37\074\uff37\112\uff37\113\uff37" +
    "\115\uff37\117\uff37\120\uff37\121\uff37\122\uff37\001\002\000" +
    "\126\003\uff54\004\167\005\174\007\uff54\011\212\014\uff54" +
    "\016\205\017\uff54\020\uff54\021\176\022\uff54\023\uff54\024" +
    "\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032\uff54\033\uff54" +
    "\034\uff54\035\uff54\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\053\uff54\054\uff54\066\uff54\067\202" +
    "\070\uff54\073\uff54\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\056\003\uff51" +
    "\007\uff51\014\uff51\017\uff51\020\243\021\230\022\241\023" +
    "\225\024\232\026\233\027\244\030\226\031\242\032\234" +
    "\033\227\034\231\035\235\053\237\054\uff51\066\236\070" +
    "\uff51\073\uff51\001\002\000\054\004\uff36\005\uff36\011\uff36" +
    "\016\uff36\021\uff36\036\uff36\037\uff36\040\uff36\043\uff36\044" +
    "\uff36\046\uff36\047\uff36\067\uff36\074\uff36\112\uff36\113\uff36" +
    "\115\uff36\117\uff36\120\uff36\121\uff36\122\uff36\001\002\000" +
    "\054\004\uff35\005\uff35\011\uff35\016\uff35\021\uff35\036\uff35" +
    "\037\uff35\040\uff35\043\uff35\044\uff35\046\uff35\047\uff35\067" +
    "\uff35\074\uff35\112\uff35\113\uff35\115\uff35\117\uff35\120\uff35" +
    "\121\uff35\122\uff35\001\002\000\054\004\167\005\174\011" +
    "\212\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\042\017\340\020\243\021\230\022\241\023\225\024" +
    "\232\026\233\027\244\030\226\031\242\032\234\033\227" +
    "\034\231\035\235\053\237\066\236\001\002\000\056\003" +
    "\uff45\007\uff45\014\uff45\017\uff45\020\uff45\021\uff45\022\uff45" +
    "\023\uff45\024\uff45\026\uff45\027\uff45\030\uff45\031\uff45\032" +
    "\uff45\033\uff45\034\uff45\035\uff45\053\uff45\054\uff45\066\uff45" +
    "\070\uff45\073\uff45\001\002\000\056\003\uff5b\007\uff5b\014" +
    "\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b" +
    "\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034" +
    "\uff5b\035\uff5b\053\uff5b\054\uff5b\066\uff5b\070\uff5b\073\uff5b" +
    "\001\002\000\054\004\167\005\174\011\212\016\205\021" +
    "\176\036\165\037\163\040\162\043\200\044\207\046\172" +
    "\047\203\067\202\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\042\020\243" +
    "\021\230\022\241\023\225\024\232\026\233\027\244\030" +
    "\226\031\242\032\234\033\227\034\231\035\235\053\237" +
    "\066\236\070\344\001\002\000\054\004\167\005\174\011" +
    "\212\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\042\017\346\020\243\021\230\022\241\023\225\024" +
    "\232\026\233\027\244\030\226\031\242\032\234\033\227" +
    "\034\231\035\235\053\237\066\236\001\002\000\056\003" +
    "\uff5f\007\uff5f\014\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f" +
    "\023\uff5f\024\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\053\uff5f\054\uff5f\066\uff5f" +
    "\070\uff5f\073\uff5f\001\002\000\054\004\167\005\174\011" +
    "\212\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\042\017\351\020\243\021\230\022\241\023\225\024" +
    "\232\026\233\027\244\030\226\031\242\032\234\033\227" +
    "\034\231\035\235\053\237\066\236\001\002\000\056\003" +
    "\uff43\007\uff43\014\uff43\017\uff43\020\uff43\021\uff43\022\uff43" +
    "\023\uff43\024\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032" +
    "\uff43\033\uff43\034\uff43\035\uff43\053\uff43\054\uff43\066\uff43" +
    "\070\uff43\073\uff43\001\002\000\056\003\uff61\007\uff61\014" +
    "\uff61\017\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61" +
    "\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034" +
    "\uff61\035\uff61\053\uff61\054\uff61\066\uff61\070\uff61\073\uff61" +
    "\001\002\000\106\003\uffb0\007\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\015\uffb0\041\uffb0\042\uffb0\045\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\105\uffb0\111\uffb0\113\uffb0\116" +
    "\uffb0\123\uffb0\124\uffb0\125\uffb0\001\002\000\056\003\uff5c" +
    "\007\uff5c\014\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023" +
    "\uff5c\024\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\033\uff5c\034\uff5c\035\uff5c\053\uff5c\054\uff5c\066\uff5c\070" +
    "\uff5c\073\uff5c\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\042\017\357\020\243\021\230\022\241\023\225\024\232" +
    "\026\233\027\244\030\226\031\242\032\234\033\227\034" +
    "\231\035\235\053\237\066\236\001\002\000\056\003\uff4f" +
    "\007\uff4f\014\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023" +
    "\uff4f\024\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f" +
    "\033\uff4f\034\uff4f\035\uff4f\053\uff4f\054\uff4f\066\uff4f\070" +
    "\uff4f\073\uff4f\001\002\000\056\003\uff62\007\uff62\014\uff62" +
    "\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62\026" +
    "\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62" +
    "\035\uff62\053\uff62\054\uff62\066\uff62\070\uff62\073\uff62\001" +
    "\002\000\054\004\167\005\174\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\042\017\363\020" +
    "\243\021\230\022\241\023\225\024\232\026\233\027\244" +
    "\030\226\031\242\032\234\033\227\034\231\035\235\053" +
    "\237\066\236\001\002\000\056\003\uff44\007\uff44\014\uff44" +
    "\017\uff44\020\uff44\021\uff44\022\uff44\023\uff44\024\uff44\026" +
    "\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44" +
    "\035\uff44\053\uff44\054\uff44\066\uff44\070\uff44\073\uff44\001" +
    "\002\000\056\003\uff38\007\uff38\014\uff38\017\uff38\020\243" +
    "\021\230\022\241\023\225\024\232\026\233\027\244\030" +
    "\226\031\242\032\234\033\227\034\231\035\235\053\237" +
    "\054\uff38\066\236\070\uff38\073\uff38\001\002\000\106\003" +
    "\uff99\007\uff99\011\uff99\012\uff99\013\uff99\015\uff99\041\uff99" +
    "\042\uff99\045\uff99\050\uff99\051\uff99\052\uff99\055\uff99\056" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103" +
    "\uff99\105\uff99\111\uff99\113\uff99\116\uff99\123\uff99\124\uff99" +
    "\125\uff99\001\002\000\106\003\uffb9\007\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\015\uffb9\041\uffb9\042\uffb9\045\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\105\uffb9\111\uffb9\113" +
    "\uffb9\116\uffb9\123\uffb9\124\uffb9\125\uffb9\001\002\000\100" +
    "\003\137\011\116\012\053\013\035\015\144\041\036\042" +
    "\042\045\041\050\154\051\127\052\107\055\125\056\123" +
    "\060\136\061\103\062\152\063\122\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\111\160" +
    "\113\115\116\121\123\145\124\132\125\114\001\002\000" +
    "\100\007\372\011\116\012\053\013\035\015\144\041\036" +
    "\042\042\045\041\050\154\051\127\052\107\055\125\056" +
    "\123\060\136\061\103\062\152\063\122\075\055\076\006" +
    "\077\015\100\013\101\012\102\007\103\017\105\022\111" +
    "\160\113\115\116\121\123\145\124\132\125\114\001\002" +
    "\000\104\007\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\041" +
    "\uffd0\042\uffd0\045\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0" +
    "\056\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\105\uffd0\111\uffd0\113\uffd0\116\uffd0\123\uffd0\124" +
    "\uffd0\125\uffd0\001\002\000\004\051\373\001\002\000\004" +
    "\016\374\001\002\000\054\004\167\005\174\011\212\016" +
    "\205\021\176\036\165\037\163\040\162\043\200\044\207" +
    "\046\172\047\203\067\202\074\210\112\170\113\213\115" +
    "\177\117\206\120\204\121\164\122\201\001\002\000\042" +
    "\017\376\020\243\021\230\022\241\023\225\024\232\026" +
    "\233\027\244\030\226\031\242\032\234\033\227\034\231" +
    "\035\235\053\237\066\236\001\002\000\004\014\377\001" +
    "\002\000\106\003\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\015\uffa9\041\uffa9\042\uffa9\045\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\055\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\105\uffa9\111\uffa9\113\uffa9\116\uffa9" +
    "\123\uffa9\124\uffa9\125\uffa9\001\002\000\042\007\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\041\uffd2\042\uffd2\045\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\105" +
    "\uffd2\107\uffd2\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\006\017\u0103\070\272\001\002\000\004\014\u0104\001\002" +
    "\000\106\003\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\015" +
    "\uffc8\041\uffc8\042\uffc8\045\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\055\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\102\uffc8\103\uffc8\105\uffc8\111\uffc8\113\uffc8\116\uffc8\123" +
    "\uffc8\124\uffc8\125\uffc8\001\002\000\004\017\u0106\001\002" +
    "\000\004\014\u0107\001\002\000\106\003\uff95\007\uff95\011" +
    "\uff95\012\uff95\013\uff95\015\uff95\041\uff95\042\uff95\045\uff95" +
    "\050\uff95\051\uff95\052\uff95\055\uff95\056\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\075\uff95\076\uff95" +
    "\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\105\uff95\111" +
    "\uff95\113\uff95\116\uff95\123\uff95\124\uff95\125\uff95\001\002" +
    "\000\104\007\uffce\011\uffce\012\uffce\013\uffce\015\uffce\041" +
    "\uffce\042\uffce\045\uffce\050\uffce\051\uffce\052\uffce\055\uffce" +
    "\056\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\103\uffce\105\uffce\111\uffce\113\uffce\116\uffce\123\uffce\124" +
    "\uffce\125\uffce\001\002\000\034\011\u0110\012\053\013\035" +
    "\041\036\042\042\045\041\075\055\076\006\077\015\100" +
    "\013\101\012\102\007\103\017\001\002\000\020\011\066" +
    "\012\053\013\035\041\036\042\042\045\041\075\055\001" +
    "\002\000\006\003\u0127\011\072\001\002\000\054\004\167" +
    "\005\174\011\212\016\205\021\176\036\165\037\163\040" +
    "\162\043\200\044\207\046\172\047\203\067\202\074\210" +
    "\112\170\113\213\115\177\117\206\120\204\121\164\122" +
    "\201\001\002\000\054\004\uffa6\005\uffa6\011\uffa6\016\uffa6" +
    "\021\uffa6\036\uffa6\037\uffa6\040\uffa6\043\uffa6\044\uffa6\046" +
    "\uffa6\047\uffa6\067\uffa6\074\uffa6\112\uffa6\113\uffa6\115\uffa6" +
    "\117\uffa6\120\uffa6\121\uffa6\122\uffa6\001\002\000\054\004" +
    "\uffa7\005\uffa7\011\uffa7\016\uffa7\021\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\043\uffa7\044\uffa7\046\uffa7\047\uffa7\067\uffa7\074" +
    "\uffa7\112\uffa7\113\uffa7\115\uffa7\117\uffa7\120\uffa7\121\uffa7" +
    "\122\uffa7\001\002\000\004\054\u0118\001\002\000\012\003" +
    "\uff2e\010\u0112\011\uff2e\072\223\001\002\000\006\010\u0115" +
    "\072\274\001\002\000\054\004\167\005\174\011\212\016" +
    "\205\021\176\036\165\037\163\040\162\043\200\044\207" +
    "\046\172\047\203\067\202\074\210\112\170\113\213\115" +
    "\177\117\206\120\204\121\164\122\201\001\002\000\042" +
    "\014\u0114\020\243\021\230\022\241\023\225\024\232\026" +
    "\233\027\244\030\226\031\242\032\234\033\227\034\231" +
    "\035\235\053\237\066\236\001\002\000\154\003\uff78\004" +
    "\uff78\005\uff78\007\uff78\011\uff78\012\uff78\013\uff78\015\uff78" +
    "\016\uff78\021\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\055\uff78\056\uff78\060\uff78\061\uff78\062" +
    "\uff78\063\uff78\064\uff78\065\uff78\067\uff78\074\uff78\075\uff78" +
    "\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78\103\uff78\105" +
    "\uff78\111\uff78\112\uff78\113\uff78\115\uff78\116\uff78\117\uff78" +
    "\120\uff78\121\uff78\122\uff78\123\uff78\124\uff78\125\uff78\001" +
    "\002\000\054\004\167\005\174\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\042\014\u0117\020" +
    "\243\021\230\022\241\023\225\024\232\026\233\027\244" +
    "\030\226\031\242\032\234\033\227\034\231\035\235\053" +
    "\237\066\236\001\002\000\154\003\uff77\004\uff77\005\uff77" +
    "\007\uff77\011\uff77\012\uff77\013\uff77\015\uff77\016\uff77\021" +
    "\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052" +
    "\uff77\055\uff77\056\uff77\060\uff77\061\uff77\062\uff77\063\uff77" +
    "\064\uff77\065\uff77\067\uff77\074\uff77\075\uff77\076\uff77\077" +
    "\uff77\100\uff77\101\uff77\102\uff77\103\uff77\105\uff77\111\uff77" +
    "\112\uff77\113\uff77\115\uff77\116\uff77\117\uff77\120\uff77\121" +
    "\uff77\122\uff77\123\uff77\124\uff77\125\uff77\001\002\000\054" +
    "\004\167\005\174\011\212\016\205\021\176\036\165\037" +
    "\163\040\162\043\200\044\207\046\172\047\203\067\202" +
    "\074\210\112\170\113\213\115\177\117\206\120\204\121" +
    "\164\122\201\001\002\000\042\017\u011a\020\243\021\230" +
    "\022\241\023\225\024\232\026\233\027\244\030\226\031" +
    "\242\032\234\033\227\034\231\035\235\053\237\066\236" +
    "\001\002\000\004\006\u011b\001\002\000\100\003\137\011" +
    "\116\012\053\013\035\015\144\041\036\042\042\045\041" +
    "\050\154\051\127\052\107\055\125\056\123\060\136\061" +
    "\103\062\152\063\122\075\055\076\006\077\015\100\013" +
    "\101\012\102\007\103\017\105\022\111\160\113\115\116" +
    "\121\123\145\124\132\125\114\001\002\000\100\007\u011d" +
    "\011\116\012\053\013\035\015\144\041\036\042\042\045" +
    "\041\050\154\051\127\052\107\055\125\056\123\060\136" +
    "\061\103\062\152\063\122\075\055\076\006\077\015\100" +
    "\013\101\012\102\007\103\017\105\022\111\160\113\115" +
    "\116\121\123\145\124\132\125\114\001\002\000\106\003" +
    "\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\041\uffb1" +
    "\042\uffb1\045\uffb1\050\uffb1\051\uffb1\052\uffb1\055\uffb1\056" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103" +
    "\uffb1\105\uffb1\111\uffb1\113\uffb1\116\uffb1\123\uffb1\124\uffb1" +
    "\125\uffb1\001\002\000\042\014\u011f\020\243\021\230\022" +
    "\241\023\225\024\232\026\233\027\244\030\226\031\242" +
    "\032\234\033\227\034\231\035\235\053\237\066\236\001" +
    "\002\000\054\004\167\005\174\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\042\017\u0121\020" +
    "\243\021\230\022\241\023\225\024\232\026\233\027\244" +
    "\030\226\031\242\032\234\033\227\034\231\035\235\053" +
    "\237\066\236\001\002\000\004\006\u0122\001\002\000\100" +
    "\003\137\011\116\012\053\013\035\015\144\041\036\042" +
    "\042\045\041\050\154\051\127\052\107\055\125\056\123" +
    "\060\136\061\103\062\152\063\122\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\111\160" +
    "\113\115\116\121\123\145\124\132\125\114\001\002\000" +
    "\100\007\u0124\011\116\012\053\013\035\015\144\041\036" +
    "\042\042\045\041\050\154\051\127\052\107\055\125\056" +
    "\123\060\136\061\103\062\152\063\122\075\055\076\006" +
    "\077\015\100\013\101\012\102\007\103\017\105\022\111" +
    "\160\113\115\116\121\123\145\124\132\125\114\001\002" +
    "\000\106\003\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\015" +
    "\uffa8\041\uffa8\042\uffa8\045\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\055\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8" +
    "\102\uffa8\103\uffa8\105\uffa8\111\uffa8\113\uffa8\116\uffa8\123" +
    "\uffa8\124\uffa8\125\uffa8\001\002\000\010\003\u0140\014\u0142" +
    "\070\u0141\001\002\000\010\003\uff90\014\uff90\070\uff90\001" +
    "\002\000\010\003\uff8e\014\uff8e\070\uff8e\001\002\000\014" +
    "\003\uff8c\010\u0129\014\uff8c\054\uffd3\070\uff8c\001\002\000" +
    "\056\004\167\005\174\006\u012a\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\062\003\u0135\004" +
    "\167\005\174\006\u012f\007\uff7d\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\010\003\uff8d\014" +
    "\uff8d\070\uff8d\001\002\000\046\003\uff89\014\uff89\020\243" +
    "\021\230\022\241\023\225\024\232\026\233\027\244\030" +
    "\226\031\242\032\234\033\227\034\231\035\235\053\237" +
    "\066\236\070\uff89\001\002\000\010\003\uff88\014\uff88\070" +
    "\uff88\001\002\000\004\007\u013f\001\002\000\062\003\u0135" +
    "\004\167\005\174\006\u012f\007\uff7d\011\212\016\205\021" +
    "\176\036\165\037\163\040\162\043\200\044\207\046\172" +
    "\047\203\067\202\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\010\003\u0138" +
    "\007\uff86\070\u0139\001\002\000\004\007\uff85\001\002\000" +
    "\044\007\uff7b\020\243\021\230\022\241\023\225\024\232" +
    "\026\233\027\244\030\226\031\242\032\234\033\227\034" +
    "\231\035\235\053\237\066\236\070\uff7b\001\002\000\006" +
    "\007\uff7e\070\u0136\001\002\000\010\003\uff83\007\uff83\070" +
    "\uff83\001\002\000\010\003\uff81\007\uff81\070\uff81\001\002" +
    "\000\054\004\167\005\174\011\212\016\205\021\176\036" +
    "\165\037\163\040\162\043\200\044\207\046\172\047\203" +
    "\067\202\074\210\112\170\113\213\115\177\117\206\120" +
    "\204\121\164\122\201\001\002\000\044\007\uff7c\020\243" +
    "\021\230\022\241\023\225\024\232\026\233\027\244\030" +
    "\226\031\242\032\234\033\227\034\231\035\235\053\237" +
    "\066\236\070\uff7c\001\002\000\010\003\uff82\007\uff82\070" +
    "\uff82\001\002\000\004\006\u012f\001\002\000\010\003\uff84" +
    "\007\uff84\070\uff84\001\002\000\010\003\u0138\007\u013e\070" +
    "\u0139\001\002\000\004\007\u013d\001\002\000\010\003\uff80" +
    "\007\uff80\070\uff80\001\002\000\010\003\uff7f\007\uff7f\070" +
    "\uff7f\001\002\000\010\003\uff87\014\uff87\070\uff87\001\002" +
    "\000\010\003\uff8f\014\uff8f\070\uff8f\001\002\000\004\011" +
    "\072\001\002\000\112\004\uff93\005\uff93\007\uff93\011\uff93" +
    "\012\uff93\013\uff93\016\uff93\021\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\067\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100" +
    "\uff93\101\uff93\102\uff93\103\uff93\105\uff93\107\uff93\112\uff93" +
    "\113\uff93\115\uff93\117\uff93\120\uff93\121\uff93\122\uff93\001" +
    "\002\000\010\003\uff91\014\uff91\070\uff91\001\002\000\012" +
    "\003\uff8c\010\u0129\014\uff8c\070\uff8c\001\002\000\006\003" +
    "\u0127\011\072\001\002\000\010\003\u0140\014\u0147\070\u0141" +
    "\001\002\000\112\004\uff94\005\uff94\007\uff94\011\uff94\012" +
    "\uff94\013\uff94\016\uff94\021\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\067\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94" +
    "\101\uff94\102\uff94\103\uff94\105\uff94\107\uff94\112\uff94\113" +
    "\uff94\115\uff94\117\uff94\120\uff94\121\uff94\122\uff94\001\002" +
    "\000\004\011\216\001\002\000\006\014\uff74\114\277\001" +
    "\002\000\004\011\u014b\001\002\000\004\017\u014c\001\002" +
    "\000\004\014\u014d\001\002\000\106\003\uffb4\007\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\015\uffb4\041\uffb4\042\uffb4\045\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\055\uffb4\056\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\105\uffb4\111" +
    "\uffb4\113\uffb4\116\uffb4\123\uffb4\124\uffb4\125\uffb4\001\002" +
    "\000\054\004\167\005\174\011\212\016\205\021\176\036" +
    "\165\037\163\040\162\043\200\044\207\046\172\047\203" +
    "\067\202\074\210\112\170\113\213\115\177\117\206\120" +
    "\204\121\164\122\201\001\002\000\042\017\u0150\020\243" +
    "\021\230\022\241\023\225\024\232\026\233\027\244\030" +
    "\226\031\242\032\234\033\227\034\231\035\235\053\237" +
    "\066\236\001\002\000\004\006\u0151\001\002\000\100\003" +
    "\137\011\116\012\053\013\035\015\144\041\036\042\042" +
    "\045\041\050\154\051\127\052\107\055\125\056\123\060" +
    "\136\061\103\062\152\063\122\075\055\076\006\077\015" +
    "\100\013\101\012\102\007\103\017\105\022\111\160\113" +
    "\115\116\121\123\145\124\132\125\114\001\002\000\100" +
    "\007\u0153\011\116\012\053\013\035\015\144\041\036\042" +
    "\042\045\041\050\154\051\127\052\107\055\125\056\123" +
    "\060\136\061\103\062\152\063\122\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\111\160" +
    "\113\115\116\121\123\145\124\132\125\114\001\002\000" +
    "\106\003\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a" +
    "\041\uff9a\042\uff9a\045\uff9a\050\uff9a\051\uff9a\052\uff9a\055" +
    "\uff9a\056\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102" +
    "\uff9a\103\uff9a\105\uff9a\111\uff9a\113\uff9a\116\uff9a\123\uff9a" +
    "\124\uff9a\125\uff9a\001\002\000\054\004\167\005\174\011" +
    "\212\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\042\017\u0156\020\243\021\230\022\241\023\225\024" +
    "\232\026\233\027\244\030\226\031\242\032\234\033\227" +
    "\034\231\035\235\053\237\066\236\001\002\000\004\006" +
    "\u0157\001\002\000\100\003\137\011\116\012\053\013\035" +
    "\015\144\041\036\042\042\045\041\050\154\051\127\052" +
    "\107\055\125\056\123\060\136\061\103\062\152\063\122" +
    "\075\055\076\006\077\015\100\013\101\012\102\007\103" +
    "\017\105\022\111\160\113\115\116\121\123\145\124\132" +
    "\125\114\001\002\000\100\007\u0159\011\116\012\053\013" +
    "\035\015\144\041\036\042\042\045\041\050\154\051\127" +
    "\052\107\055\125\056\123\060\136\061\103\062\152\063" +
    "\122\075\055\076\006\077\015\100\013\101\012\102\007" +
    "\103\017\105\022\111\160\113\115\116\121\123\145\124" +
    "\132\125\114\001\002\000\110\003\uffa5\007\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\041\uffa5\042\uffa5\045\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\055\uffa5\056\uffa5\057\u015b\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\105\uffa5" +
    "\111\uffa5\113\uffa5\116\uffa5\123\uffa5\124\uffa5\125\uffa5\001" +
    "\002\000\110\003\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\015\uffa4\041\uffa4\042\uffa4\045\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\055\uffa4\056\uffa4\057\u0167\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\075\uffa4\076\uffa4\077\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\105\uffa4\111\uffa4\113\uffa4" +
    "\116\uffa4\123\uffa4\124\uffa4\125\uffa4\001\002\000\006\006" +
    "\u015e\055\u015d\001\002\000\106\003\uffa2\007\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\015\uffa2\041\uffa2\042\uffa2\045\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\075\uffa2\076\uffa2\077" +
    "\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\105\uffa2\111\uffa2" +
    "\113\uffa2\116\uffa2\123\uffa2\124\uffa2\125\uffa2\001\002\000" +
    "\004\016\u0161\001\002\000\100\003\137\011\116\012\053" +
    "\013\035\015\144\041\036\042\042\045\041\050\154\051" +
    "\127\052\107\055\125\056\123\060\136\061\103\062\152" +
    "\063\122\075\055\076\006\077\015\100\013\101\012\102" +
    "\007\103\017\105\022\111\160\113\115\116\121\123\145" +
    "\124\132\125\114\001\002\000\100\007\u0160\011\116\012" +
    "\053\013\035\015\144\041\036\042\042\045\041\050\154" +
    "\051\127\052\107\055\125\056\123\060\136\061\103\062" +
    "\152\063\122\075\055\076\006\077\015\100\013\101\012" +
    "\102\007\103\017\105\022\111\160\113\115\116\121\123" +
    "\145\124\132\125\114\001\002\000\106\003\uff9f\007\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\015\uff9f\041\uff9f\042\uff9f\045" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\055\uff9f\056\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\075\uff9f\076" +
    "\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\105\uff9f" +
    "\111\uff9f\113\uff9f\116\uff9f\123\uff9f\124\uff9f\125\uff9f\001" +
    "\002\000\054\004\167\005\174\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\042\017\u0163\020" +
    "\243\021\230\022\241\023\225\024\232\026\233\027\244" +
    "\030\226\031\242\032\234\033\227\034\231\035\235\053" +
    "\237\066\236\001\002\000\004\006\u0164\001\002\000\100" +
    "\003\137\011\116\012\053\013\035\015\144\041\036\042" +
    "\042\045\041\050\154\051\127\052\107\055\125\056\123" +
    "\060\136\061\103\062\152\063\122\075\055\076\006\077" +
    "\015\100\013\101\012\102\007\103\017\105\022\111\160" +
    "\113\115\116\121\123\145\124\132\125\114\001\002\000" +
    "\100\007\u0166\011\116\012\053\013\035\015\144\041\036" +
    "\042\042\045\041\050\154\051\127\052\107\055\125\056" +
    "\123\060\136\061\103\062\152\063\122\075\055\076\006" +
    "\077\015\100\013\101\012\102\007\103\017\105\022\111" +
    "\160\113\115\116\121\123\145\124\132\125\114\001\002" +
    "\000\110\003\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\015" +
    "\uffa0\041\uffa0\042\uffa0\045\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\105\uffa0\111\uffa0\113\uffa0\116" +
    "\uffa0\123\uffa0\124\uffa0\125\uffa0\001\002\000\006\006\u015e" +
    "\055\u0169\001\002\000\106\003\uffa3\007\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\015\uffa3\041\uffa3\042\uffa3\045\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\055\uffa3\056\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\075\uffa3\076\uffa3\077\uffa3" +
    "\100\uffa3\101\uffa3\102\uffa3\103\uffa3\105\uffa3\111\uffa3\113" +
    "\uffa3\116\uffa3\123\uffa3\124\uffa3\125\uffa3\001\002\000\004" +
    "\016\u016a\001\002\000\054\004\167\005\174\011\212\016" +
    "\205\021\176\036\165\037\163\040\162\043\200\044\207" +
    "\046\172\047\203\067\202\074\210\112\170\113\213\115" +
    "\177\117\206\120\204\121\164\122\201\001\002\000\042" +
    "\017\u016c\020\243\021\230\022\241\023\225\024\232\026" +
    "\233\027\244\030\226\031\242\032\234\033\227\034\231" +
    "\035\235\053\237\066\236\001\002\000\004\006\u016d\001" +
    "\002\000\100\003\137\011\116\012\053\013\035\015\144" +
    "\041\036\042\042\045\041\050\154\051\127\052\107\055" +
    "\125\056\123\060\136\061\103\062\152\063\122\075\055" +
    "\076\006\077\015\100\013\101\012\102\007\103\017\105" +
    "\022\111\160\113\115\116\121\123\145\124\132\125\114" +
    "\001\002\000\100\007\u016f\011\116\012\053\013\035\015" +
    "\144\041\036\042\042\045\041\050\154\051\127\052\107" +
    "\055\125\056\123\060\136\061\103\062\152\063\122\075" +
    "\055\076\006\077\015\100\013\101\012\102\007\103\017" +
    "\105\022\111\160\113\115\116\121\123\145\124\132\125" +
    "\114\001\002\000\110\003\uffa1\007\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\015\uffa1\041\uffa1\042\uffa1\045\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\065\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1\111\uffa1" +
    "\113\uffa1\116\uffa1\123\uffa1\124\uffa1\125\uffa1\001\002\000" +
    "\054\004\167\005\174\011\212\016\205\021\176\036\165" +
    "\037\163\040\162\043\200\044\207\046\172\047\203\067" +
    "\202\074\210\112\170\113\213\115\177\117\206\120\204" +
    "\121\164\122\201\001\002\000\042\017\u0172\020\243\021" +
    "\230\022\241\023\225\024\232\026\233\027\244\030\226" +
    "\031\242\032\234\033\227\034\231\035\235\053\237\066" +
    "\236\001\002\000\004\014\u0173\001\002\000\106\003\uff96" +
    "\007\uff96\011\uff96\012\uff96\013\uff96\015\uff96\041\uff96\042" +
    "\uff96\045\uff96\050\uff96\051\uff96\052\uff96\055\uff96\056\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\075" +
    "\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96" +
    "\105\uff96\111\uff96\113\uff96\116\uff96\123\uff96\124\uff96\125" +
    "\uff96\001\002\000\054\004\167\005\174\011\212\016\205" +
    "\021\176\036\165\037\163\040\162\043\200\044\207\046" +
    "\172\047\203\067\202\074\210\112\170\113\213\115\177" +
    "\117\206\120\204\121\164\122\201\001\002\000\042\017" +
    "\u0176\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\227\034\231\035" +
    "\235\053\237\066\236\001\002\000\004\006\u0177\001\002" +
    "\000\006\064\u0179\065\u017b\001\002\000\010\007\uffac\064" +
    "\uffac\065\uffac\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\010\007\u017f\064\u0179\065\u017b\001\002\000\004\054\u017c" +
    "\001\002\000\100\003\137\011\116\012\053\013\035\015" +
    "\144\041\036\042\042\045\041\050\154\051\127\052\107" +
    "\055\125\056\123\060\136\061\103\062\152\063\122\075" +
    "\055\076\006\077\015\100\013\101\012\102\007\103\017" +
    "\105\022\111\160\113\115\116\121\123\145\124\132\125" +
    "\114\001\002\000\104\007\uffaa\011\116\012\053\013\035" +
    "\015\144\041\036\042\042\045\041\050\154\051\127\052" +
    "\107\055\125\056\123\060\136\061\103\062\152\063\122" +
    "\064\uffaa\065\uffaa\075\055\076\006\077\015\100\013\101" +
    "\012\102\007\103\017\105\022\111\160\113\115\116\121" +
    "\123\145\124\132\125\114\001\002\000\010\007\uffad\064" +
    "\uffad\065\uffad\001\002\000\106\003\uffae\007\uffae\011\uffae" +
    "\012\uffae\013\uffae\015\uffae\041\uffae\042\uffae\045\uffae\050" +
    "\uffae\051\uffae\052\uffae\055\uffae\056\uffae\060\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\075\uffae\076\uffae\077" +
    "\uffae\100\uffae\101\uffae\102\uffae\103\uffae\105\uffae\111\uffae" +
    "\113\uffae\116\uffae\123\uffae\124\uffae\125\uffae\001\002\000" +
    "\042\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\227\034\231\035" +
    "\235\053\237\054\u0181\066\236\001\002\000\100\003\137" +
    "\011\116\012\053\013\035\015\144\041\036\042\042\045" +
    "\041\050\154\051\127\052\107\055\125\056\123\060\136" +
    "\061\103\062\152\063\122\075\055\076\006\077\015\100" +
    "\013\101\012\102\007\103\017\105\022\111\160\113\115" +
    "\116\121\123\145\124\132\125\114\001\002\000\104\007" +
    "\uffab\011\116\012\053\013\035\015\144\041\036\042\042" +
    "\045\041\050\154\051\127\052\107\055\125\056\123\060" +
    "\136\061\103\062\152\063\122\064\uffab\065\uffab\075\055" +
    "\076\006\077\015\100\013\101\012\102\007\103\017\105" +
    "\022\111\160\113\115\116\121\123\145\124\132\125\114" +
    "\001\002\000\054\004\167\005\174\011\212\016\205\021" +
    "\176\036\165\037\163\040\162\043\200\044\207\046\172" +
    "\047\203\067\202\074\210\112\170\113\213\115\177\117" +
    "\206\120\204\121\164\122\201\001\002\000\042\020\243" +
    "\021\230\022\241\023\225\024\232\026\233\027\244\030" +
    "\226\031\242\032\234\033\227\034\231\035\235\053\237" +
    "\066\236\070\u0185\001\002\000\054\004\167\005\174\011" +
    "\212\016\205\021\176\036\165\037\163\040\162\043\200" +
    "\044\207\046\172\047\203\067\202\074\210\112\170\113" +
    "\213\115\177\117\206\120\204\121\164\122\201\001\002" +
    "\000\042\017\u0187\020\243\021\230\022\241\023\225\024" +
    "\232\026\233\027\244\030\226\031\242\032\234\033\227" +
    "\034\231\035\235\053\237\066\236\001\002\000\004\014" +
    "\u0188\001\002\000\106\003\uffb2\007\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\015\uffb2\041\uffb2\042\uffb2\045\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\075\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\105\uffb2\111\uffb2\113\uffb2" +
    "\116\uffb2\123\uffb2\124\uffb2\125\uffb2\001\002\000\004\011" +
    "\216\001\002\000\012\010\u0115\046\u0195\047\u0196\072\274" +
    "\001\002\000\004\014\u0194\001\002\000\056\004\167\005" +
    "\174\011\212\016\205\017\u0190\021\176\036\165\037\163" +
    "\040\162\043\200\044\207\046\172\047\203\067\202\074" +
    "\210\112\170\113\213\115\177\117\206\120\204\121\164" +
    "\122\201\001\002\000\004\014\u018e\001\002\000\106\003" +
    "\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\041\uff9d" +
    "\042\uff9d\045\uff9d\050\uff9d\051\uff9d\052\uff9d\055\uff9d\056" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103" +
    "\uff9d\105\uff9d\111\uff9d\113\uff9d\116\uff9d\123\uff9d\124\uff9d" +
    "\125\uff9d\001\002\000\006\017\u0192\070\272\001\002\000" +
    "\006\014\u0191\114\uff2c\001\002\000\106\003\uff2a\007\uff2a" +
    "\011\uff2a\012\uff2a\013\uff2a\015\uff2a\041\uff2a\042\uff2a\045" +
    "\uff2a\050\uff2a\051\uff2a\052\uff2a\055\uff2a\056\uff2a\060\uff2a" +
    "\061\uff2a\062\uff2a\063\uff2a\064\uff2a\065\uff2a\075\uff2a\076" +
    "\uff2a\077\uff2a\100\uff2a\101\uff2a\102\uff2a\103\uff2a\105\uff2a" +
    "\111\uff2a\113\uff2a\116\uff2a\123\uff2a\124\uff2a\125\uff2a\001" +
    "\002\000\006\014\u0193\114\uff2d\001\002\000\106\003\uff2b" +
    "\007\uff2b\011\uff2b\012\uff2b\013\uff2b\015\uff2b\041\uff2b\042" +
    "\uff2b\045\uff2b\050\uff2b\051\uff2b\052\uff2b\055\uff2b\056\uff2b" +
    "\060\uff2b\061\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b\075" +
    "\uff2b\076\uff2b\077\uff2b\100\uff2b\101\uff2b\102\uff2b\103\uff2b" +
    "\105\uff2b\111\uff2b\113\uff2b\116\uff2b\123\uff2b\124\uff2b\125" +
    "\uff2b\001\002\000\106\003\uff9e\007\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\015\uff9e\041\uff9e\042\uff9e\045\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\055\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\075\uff9e\076\uff9e\077\uff9e\100" +
    "\uff9e\101\uff9e\102\uff9e\103\uff9e\105\uff9e\111\uff9e\113\uff9e" +
    "\116\uff9e\123\uff9e\124\uff9e\125\uff9e\001\002\000\004\014" +
    "\u0198\001\002\000\004\014\u0197\001\002\000\106\003\uff9b" +
    "\007\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\041\uff9b\042" +
    "\uff9b\045\uff9b\050\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\105\uff9b\111\uff9b\113\uff9b\116\uff9b\123\uff9b\124\uff9b\125" +
    "\uff9b\001\002\000\106\003\uff9c\007\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\015\uff9c\041\uff9c\042\uff9c\045\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\055\uff9c\056\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\075\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\103\uff9c\105\uff9c\111\uff9c\113\uff9c" +
    "\116\uff9c\123\uff9c\124\uff9c\125\uff9c\001\002\000\010\010" +
    "\u019a\014\uff76\114\277\001\002\000\054\004\167\005\174" +
    "\011\212\016\205\021\176\036\165\037\163\040\162\043" +
    "\200\044\207\046\172\047\203\067\202\074\210\112\170" +
    "\113\213\115\177\117\206\120\204\121\164\122\201\001" +
    "\002\000\042\014\uff75\020\243\021\230\022\241\023\225" +
    "\024\232\026\233\027\244\030\226\031\242\032\234\033" +
    "\227\034\231\035\235\053\237\066\236\001\002\000\004" +
    "\011\216\001\002\000\010\010\u019e\014\uff72\114\277\001" +
    "\002\000\054\004\167\005\174\011\212\016\205\021\176" +
    "\036\165\037\163\040\162\043\200\044\207\046\172\047" +
    "\203\067\202\074\210\112\170\113\213\115\177\117\206" +
    "\120\204\121\164\122\201\001\002\000\042\014\uff73\020" +
    "\243\021\230\022\241\023\225\024\232\026\233\027\244" +
    "\030\226\031\242\032\234\033\227\034\231\035\235\053" +
    "\237\066\236\001\002\000\054\004\167\005\174\011\212" +
    "\016\205\021\176\036\165\037\163\040\162\043\200\044" +
    "\207\046\172\047\203\067\202\074\210\112\170\113\213" +
    "\115\177\117\206\120\204\121\164\122\201\001\002\000" +
    "\042\020\243\021\230\022\241\023\225\024\232\026\233" +
    "\027\244\030\226\031\242\032\234\033\227\034\231\035" +
    "\235\053\237\066\236\070\u01a2\001\002\000\054\004\167" +
    "\005\174\011\212\016\205\021\176\036\165\037\163\040" +
    "\162\043\200\044\207\046\172\047\203\067\202\074\210" +
    "\112\170\113\213\115\177\117\206\120\204\121\164\122" +
    "\201\001\002\000\042\017\u01a4\020\243\021\230\022\241" +
    "\023\225\024\232\026\233\027\244\030\226\031\242\032" +
    "\234\033\227\034\231\035\235\053\237\066\236\001\002" +
    "\000\106\003\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\015" +
    "\uffb3\041\uffb3\042\uffb3\045\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\055\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\103\uffb3\105\uffb3\111\uffb3\113\uffb3\116\uffb3\123" +
    "\uffb3\124\uffb3\125\uffb3\001\002\000\010\003\u0140\014\u01a6" +
    "\070\u0141\001\002\000\106\003\uff92\007\uff92\011\uff92\012" +
    "\uff92\013\uff92\015\uff92\041\uff92\042\uff92\045\uff92\050\uff92" +
    "\051\uff92\052\uff92\055\uff92\056\uff92\060\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\075\uff92\076\uff92\077\uff92" +
    "\100\uff92\101\uff92\102\uff92\103\uff92\105\uff92\111\uff92\113" +
    "\uff92\116\uff92\123\uff92\124\uff92\125\uff92\001\002\000\054" +
    "\004\167\005\174\011\212\016\205\021\176\036\165\037" +
    "\163\040\162\043\200\044\207\046\172\047\203\067\202" +
    "\074\210\112\170\113\213\115\177\117\206\120\204\121" +
    "\164\122\201\001\002\000\042\017\u01a9\020\243\021\230" +
    "\022\241\023\225\024\232\026\233\027\244\030\226\031" +
    "\242\032\234\033\227\034\231\035\235\053\237\066\236" +
    "\001\002\000\004\014\u01aa\001\002\000\106\003\uff97\007" +
    "\uff97\011\uff97\012\uff97\013\uff97\015\uff97\041\uff97\042\uff97" +
    "\045\uff97\050\uff97\051\uff97\052\uff97\055\uff97\056\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97\105" +
    "\uff97\111\uff97\113\uff97\116\uff97\123\uff97\124\uff97\125\uff97" +
    "\001\002\000\106\003\uff98\007\uff98\011\uff98\012\uff98\013" +
    "\uff98\015\uff98\041\uff98\042\uff98\045\uff98\050\uff98\051\uff98" +
    "\052\uff98\055\uff98\056\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\075\uff98\076\uff98\077\uff98\100\uff98" +
    "\101\uff98\102\uff98\103\uff98\105\uff98\111\uff98\113\uff98\116" +
    "\uff98\123\uff98\124\uff98\125\uff98\001\002\000\006\017\uffd4" +
    "\070\uffd4\001\002\000\016\076\006\077\015\100\013\101" +
    "\012\102\007\103\017\001\002\000\020\011\066\012\053" +
    "\013\035\041\036\042\042\045\041\075\055\001\002\000" +
    "\006\011\u01b1\072\074\001\002\000\006\011\u01ba\072\076" +
    "\001\002\000\004\016\u01b7\001\002\000\006\006\u01b3\014" +
    "\u01b4\001\002\000\102\003\137\007\155\011\116\012\053" +
    "\013\035\015\144\041\036\042\042\045\041\050\154\051" +
    "\127\052\107\055\125\056\123\060\136\061\103\062\152" +
    "\063\122\075\055\076\006\077\015\100\013\101\012\102" +
    "\007\103\017\105\022\111\160\113\115\116\121\123\145" +
    "\124\132\125\114\001\002\000\042\007\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\041\uffdc\042\uffdc\045\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\105\uffdc\107" +
    "\uffdc\001\002\000\042\007\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\041\uffe1\042\uffe1\045\uffe1\075\uffe1\076\uffe1\077\uffe1\100" +
    "\uffe1\101\uffe1\102\uffe1\103\uffe1\105\uffe1\107\uffe1\001\002" +
    "\000\042\007\uffdd\011\uffdd\012\uffdd\013\uffdd\041\uffdd\042" +
    "\uffdd\045\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\102\uffdd\103\uffdd\105\uffdd\107\uffdd\001\002\000\024\011" +
    "\066\012\053\013\035\017\uffd8\041\036\042\042\045\041" +
    "\075\055\102\060\001\002\000\004\017\u01b9\001\002\000" +
    "\006\006\uffdf\014\uffdf\001\002\000\004\016\u01bb\001\002" +
    "\000\024\011\066\012\053\013\035\017\uffd8\041\036\042" +
    "\042\045\041\075\055\102\060\001\002\000\004\017\u01bd" +
    "\001\002\000\006\006\uffde\014\uffde\001\002\000\042\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\041\uffe8\042\uffe8\045\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103" +
    "\uffe8\105\uffe8\107\uffe8\001\002\000\114\002\uffea\003\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\015\uffea\041\uffea\042" +
    "\uffea\045\uffea\050\uffea\051\uffea\052\uffea\055\uffea\056\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\075" +
    "\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea" +
    "\104\uffea\105\uffea\107\uffea\111\uffea\113\uffea\116\uffea\123" +
    "\uffea\124\uffea\125\uffea\001\002\000\016\003\uff8a\010\uff8a" +
    "\014\uff8a\016\u01b7\070\uff8a\072\074\001\002\000\006\006" +
    "\u01b3\014\u01b4\001\002\000\042\007\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\041\uffe0\042\uffe0\045\uffe0\075\uffe0\076\uffe0\077" +
    "\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\105\uffe0\107\uffe0" +
    "\001\002\000\010\003\u0127\011\u01c0\072\074\001\002\000" +
    "\004\011\u01cb\001\002\000\012\003\uff2e\011\uff2e\016\u01c6" +
    "\072\uff2e\001\002\000\024\011\066\012\053\013\035\017" +
    "\uffd8\041\036\042\042\045\041\075\055\102\060\001\002" +
    "\000\004\017\u01c8\001\002\000\004\006\u01c9\001\002\000" +
    "\102\003\137\007\155\011\116\012\053\013\035\015\144" +
    "\041\036\042\042\045\041\050\154\051\127\052\107\055" +
    "\125\056\123\060\136\061\103\062\152\063\122\075\055" +
    "\076\006\077\015\100\013\101\012\102\007\103\017\105" +
    "\022\111\160\113\115\116\121\123\145\124\132\125\114" +
    "\001\002\000\042\007\uffdb\011\uffdb\012\uffdb\013\uffdb\041" +
    "\uffdb\042\uffdb\045\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\101\uffdb\102\uffdb\103\uffdb\105\uffdb\107\uffdb\001\002\000" +
    "\006\006\ufff4\106\032\001\002\000\004\006\u01cd\001\002" +
    "\000\042\007\051\011\056\012\053\013\035\041\036\042" +
    "\042\045\041\075\055\076\006\077\015\100\013\101\012" +
    "\102\007\103\017\105\022\107\054\001\002\000\114\002" +
    "\ufff7\003\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\041\ufff7\042\ufff7\045\ufff7\050\ufff7\051\ufff7\052\ufff7\055" +
    "\ufff7\056\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102" +
    "\ufff7\103\ufff7\104\ufff7\105\ufff7\107\ufff7\111\ufff7\113\ufff7" +
    "\116\ufff7\123\ufff7\124\ufff7\125\ufff7\001\002\000\006\006" +
    "\u01b3\014\u01b4\001\002\000\042\007\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\041\uffe2\042\uffe2\045\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\105\uffe2\107\uffe2" +
    "\001\002\000\026\002\ufffe\003\ufffe\076\ufffe\077\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\001\002" +
    "\000\026\002\ufffc\003\ufffc\076\ufffc\077\ufffc\100\ufffc\101" +
    "\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\001\002\000\004" +
    "\002\001\001\002\000\036\011\ufff2\012\ufff2\013\ufff2\041" +
    "\ufff2\042\ufff2\045\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2" +
    "\101\ufff2\102\ufff2\103\ufff2\105\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d2\000\024\003\015\051\024\052\020\053\004\054" +
    "\023\055\013\056\007\061\003\062\010\001\001\000\004" +
    "\062\u01d3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\053\u01d0\054\023\055\013\056\007\061\003\062" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\047\010\037\055" +
    "\042\056\036\060\043\061\003\062\010\063\044\064\046" +
    "\075\051\076\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01c2\001\001\000\014\036\u01af\040\u0124" +
    "\041\u0125\042\u0143\102\u01c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\047\010\037\055\042" +
    "\056\036\061\003\062\010\063\u01bd\064\046\076\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\061\067\060\070\063\071" +
    "\062\077\064\001\001\000\006\010\061\071\u01ab\001\001" +
    "\000\002\001\001\000\004\042\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\061\070\067\071\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\010\107" +
    "\012\103\013\140\014\110\015\125\016\137\017\133\020" +
    "\111\023\156\025\127\026\150\027\141\055\134\056\007" +
    "\061\003\062\010\065\101\066\145\072\112\073\146\074" +
    "\105\100\142\101\147\104\155\106\130\107\132\110\104" +
    "\114\152\115\116\117\123\120\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\040\u01a4\041" +
    "\u0125\042\u0143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0189\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\010\107\012\103\013" +
    "\140\014\110\015\125\016\137\017\133\020\111\023\156" +
    "\025\127\026\150\027\141\055\134\056\007\061\003\062" +
    "\010\072\112\073\146\074\105\100\370\101\147\104\155" +
    "\106\130\107\132\110\104\114\152\115\116\117\123\120" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\172\032\174\033\160\107\210\116\165\001" +
    "\001\000\014\011\363\032\174\033\160\107\210\116\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\357\032\174\033\160\107\210\116\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\351\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\326\032\174" +
    "\033\160\107\210\116\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\311\035\312\001\001\000\002" +
    "\001\001\000\004\037\301\001\001\000\002\001\001\000" +
    "\010\107\216\111\214\112\217\001\001\000\002\001\001" +
    "\000\004\037\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\265\032\174\033\160" +
    "\105\266\107\210\116\165\001\001\000\014\011\223\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\014\011\264\032\174\033\160\107\210\116\165\001" +
    "\001\000\014\011\263\032\174\033\160\107\210\116\165" +
    "\001\001\000\014\011\262\032\174\033\160\107\210\116" +
    "\165\001\001\000\014\011\261\032\174\033\160\107\210" +
    "\116\165\001\001\000\014\011\260\032\174\033\160\107" +
    "\210\116\165\001\001\000\014\011\257\032\174\033\160" +
    "\107\210\116\165\001\001\000\014\011\256\032\174\033" +
    "\160\107\210\116\165\001\001\000\014\011\255\032\174" +
    "\033\160\107\210\116\165\001\001\000\014\011\254\032" +
    "\174\033\160\107\210\116\165\001\001\000\014\011\253" +
    "\032\174\033\160\107\210\116\165\001\001\000\014\011" +
    "\250\032\174\033\160\107\210\116\165\001\001\000\002" +
    "\001\001\000\014\011\247\032\174\033\160\107\210\116" +
    "\165\001\001\000\014\011\246\032\174\033\160\107\210" +
    "\116\165\001\001\000\014\011\245\032\174\033\160\107" +
    "\210\116\165\001\001\000\014\011\244\032\174\033\160" +
    "\107\210\116\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\252\032\174\033\160\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\272" +
    "\032\174\033\160\107\210\116\165\001\001\000\002\001" +
    "\001\000\014\011\274\032\174\033\160\107\210\116\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\216\112\277\001\001\000\002\001\001\000\010\107\216" +
    "\111\306\112\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\107\216\111\305\112\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\107" +
    "\216\111\310\112\217\001\001\000\002\001\001\000\004" +
    "\037\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\265\032\174\033\160\105\315\107\210\116\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\322\032\174\033\160" +
    "\107\210\116\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\332\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\336\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\342\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\014\011\344\032\174\033\160\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\347" +
    "\032\174\033\160\107\210\116\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\355\032\174\033\160\107" +
    "\210\116\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\361\032\174\033\160\107" +
    "\210\116\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\010\107\012\103\013\140\014\110\015\125\016\137" +
    "\017\133\020\111\023\156\025\127\026\150\027\141\055" +
    "\134\056\007\061\003\062\010\066\367\072\112\073\146" +
    "\074\105\100\142\101\147\104\155\106\130\107\132\110" +
    "\104\114\152\115\116\117\123\120\117\001\001\000\074" +
    "\010\107\012\103\013\140\014\110\015\125\016\137\017" +
    "\133\020\111\023\156\025\127\026\150\027\141\055\134" +
    "\056\007\061\003\062\010\072\112\073\146\074\105\100" +
    "\370\101\147\104\155\106\130\107\132\110\104\114\152" +
    "\115\116\117\123\120\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\374\032\174" +
    "\033\160\107\210\116\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\265\032\174\033\160\105\u0101\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\u010d\010\u010a\013\u010c\024\u010b" +
    "\056\u0109\061\003\062\010\071\u010e\001\001\000\004\010" +
    "\u0144\001\001\000\010\040\u0124\041\u0125\042\u0127\001\001" +
    "\000\014\011\u011d\032\174\033\160\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0110\001\001\000\002\001\001\000\014\011" +
    "\u0112\032\174\033\160\107\210\116\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\u0115\032\174\033" +
    "\160\107\210\116\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\u0118\032\174\033\160\107\210\116" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\010\107\012\103\013\140\014\110\015\125\016\137\017" +
    "\133\020\111\023\156\025\127\026\150\027\141\055\134" +
    "\056\007\061\003\062\010\066\u011b\072\112\073\146\074" +
    "\105\100\142\101\147\104\155\106\130\107\132\110\104" +
    "\114\152\115\116\117\123\120\117\001\001\000\074\010" +
    "\107\012\103\013\140\014\110\015\125\016\137\017\133" +
    "\020\111\023\156\025\127\026\150\027\141\055\134\056" +
    "\007\061\003\062\010\072\112\073\146\074\105\100\370" +
    "\101\147\104\155\106\130\107\132\110\104\114\152\115" +
    "\116\117\123\120\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\u011f\032\174\033\160\107\210\116" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\010\107\012\103\013\140\014\110\015\125\016\137\017" +
    "\133\020\111\023\156\025\127\026\150\027\141\055\134" +
    "\056\007\061\003\062\010\066\u0122\072\112\073\146\074" +
    "\105\100\142\101\147\104\155\106\130\107\132\110\104" +
    "\114\152\115\116\117\123\120\117\001\001\000\074\010" +
    "\107\012\103\013\140\014\110\015\125\016\137\017\133" +
    "\020\111\023\156\025\127\026\150\027\141\055\134\056" +
    "\007\061\003\062\010\072\112\073\146\074\105\100\370" +
    "\101\147\104\155\106\130\107\132\110\104\114\152\115" +
    "\116\117\123\120\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\u012b\032\174\033\160\034\u012c\043\u012a" +
    "\107\210\116\165\001\001\000\026\011\u0131\032\174\033" +
    "\160\044\u012d\045\u012f\046\u0133\047\u0130\050\u0132\107\210" +
    "\116\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\u0131\032\174" +
    "\033\160\045\u013a\046\u0133\047\u013b\050\u0132\107\210\116" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\u0136\032\174\033\160\107\210\116\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\u0142\042\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\040\u0145\041\u0125\042\u0143\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\107\216\111\u0148\112\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\u014e\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\010\107\012\103\013\140\014" +
    "\110\015\125\016\137\017\133\020\111\023\156\025\127" +
    "\026\150\027\141\055\134\056\007\061\003\062\010\066" +
    "\u0151\072\112\073\146\074\105\100\142\101\147\104\155" +
    "\106\130\107\132\110\104\114\152\115\116\117\123\120" +
    "\117\001\001\000\074\010\107\012\103\013\140\014\110" +
    "\015\125\016\137\017\133\020\111\023\156\025\127\026" +
    "\150\027\141\055\134\056\007\061\003\062\010\072\112" +
    "\073\146\074\105\100\370\101\147\104\155\106\130\107" +
    "\132\110\104\114\152\115\116\117\123\120\117\001\001" +
    "\000\002\001\001\000\014\011\u0154\032\174\033\160\107" +
    "\210\116\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\010\107\012\103\013\140\014\110\015\125\016" +
    "\137\017\133\020\111\023\156\025\127\026\150\027\141" +
    "\055\134\056\007\061\003\062\010\066\u0157\072\112\073" +
    "\146\074\105\100\142\101\147\104\155\106\130\107\132" +
    "\110\104\114\152\115\116\117\123\120\117\001\001\000" +
    "\074\010\107\012\103\013\140\014\110\015\125\016\137" +
    "\017\133\020\111\023\156\025\127\026\150\027\141\055" +
    "\134\056\007\061\003\062\010\072\112\073\146\074\105" +
    "\100\370\101\147\104\155\106\130\107\132\110\104\114" +
    "\152\115\116\117\123\120\117\001\001\000\006\021\u015b" +
    "\022\u0159\001\001\000\004\021\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\010\107" +
    "\012\103\013\140\014\110\015\125\016\137\017\133\020" +
    "\111\023\156\025\127\026\150\027\141\055\134\056\007" +
    "\061\003\062\010\066\u015e\072\112\073\146\074\105\100" +
    "\142\101\147\104\155\106\130\107\132\110\104\114\152" +
    "\115\116\117\123\120\117\001\001\000\074\010\107\012" +
    "\103\013\140\014\110\015\125\016\137\017\133\020\111" +
    "\023\156\025\127\026\150\027\141\055\134\056\007\061" +
    "\003\062\010\072\112\073\146\074\105\100\370\101\147" +
    "\104\155\106\130\107\132\110\104\114\152\115\116\117" +
    "\123\120\117\001\001\000\002\001\001\000\014\011\u0161" +
    "\032\174\033\160\107\210\116\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\010\107\012\103\013\140" +
    "\014\110\015\125\016\137\017\133\020\111\023\156\025" +
    "\127\026\150\027\141\055\134\056\007\061\003\062\010" +
    "\066\u0164\072\112\073\146\074\105\100\142\101\147\104" +
    "\155\106\130\107\132\110\104\114\152\115\116\117\123" +
    "\120\117\001\001\000\074\010\107\012\103\013\140\014" +
    "\110\015\125\016\137\017\133\020\111\023\156\025\127" +
    "\026\150\027\141\055\134\056\007\061\003\062\010\072" +
    "\112\073\146\074\105\100\370\101\147\104\155\106\130" +
    "\107\132\110\104\114\152\115\116\117\123\120\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\u016a\032\174\033\160\107" +
    "\210\116\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\010\107\012\103\013\140\014\110\015\125\016" +
    "\137\017\133\020\111\023\156\025\127\026\150\027\141" +
    "\055\134\056\007\061\003\062\010\066\u016d\072\112\073" +
    "\146\074\105\100\142\101\147\104\155\106\130\107\132" +
    "\110\104\114\152\115\116\117\123\120\117\001\001\000" +
    "\074\010\107\012\103\013\140\014\110\015\125\016\137" +
    "\017\133\020\111\023\156\025\127\026\150\027\141\055" +
    "\134\056\007\061\003\062\010\072\112\073\146\074\105" +
    "\100\370\101\147\104\155\106\130\107\132\110\104\114" +
    "\152\115\116\117\123\120\117\001\001\000\002\001\001" +
    "\000\014\011\u0170\032\174\033\160\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\u0174\032\174\033\160\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u0179" +
    "\031\u0177\001\001\000\002\001\001\000\014\011\u017f\032" +
    "\174\033\160\107\210\116\165\001\001\000\004\031\u017d" +
    "\001\001\000\002\001\001\000\076\010\107\012\103\013" +
    "\140\014\110\015\125\016\137\017\133\020\111\023\156" +
    "\025\127\026\150\027\141\055\134\056\007\061\003\062" +
    "\010\066\u017c\072\112\073\146\074\105\100\142\101\147" +
    "\104\155\106\130\107\132\110\104\114\152\115\116\117" +
    "\123\120\117\001\001\000\074\010\107\012\103\013\140" +
    "\014\110\015\125\016\137\017\133\020\111\023\156\025" +
    "\127\026\150\027\141\055\134\056\007\061\003\062\010" +
    "\072\112\073\146\074\105\100\370\101\147\104\155\106" +
    "\130\107\132\110\104\114\152\115\116\117\123\120\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\010\107\012\103\013\140\014\110\015\125" +
    "\016\137\017\133\020\111\023\156\025\127\026\150\027" +
    "\141\055\134\056\007\061\003\062\010\066\u0181\072\112" +
    "\073\146\074\105\100\142\101\147\104\155\106\130\107" +
    "\132\110\104\114\152\115\116\117\123\120\117\001\001" +
    "\000\074\010\107\012\103\013\140\014\110\015\125\016" +
    "\137\017\133\020\111\023\156\025\127\026\150\027\141" +
    "\055\134\056\007\061\003\062\010\072\112\073\146\074" +
    "\105\100\370\101\147\104\155\106\130\107\132\110\104" +
    "\114\152\115\116\117\123\120\117\001\001\000\014\011" +
    "\u0183\032\174\033\160\107\210\116\165\001\001\000\002" +
    "\001\001\000\014\011\u0185\032\174\033\160\107\210\116" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\107\216\111\u0198\112\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\265\032\174" +
    "\033\160\105\u018e\107\210\116\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\u019a\032\174\033\160\107\210\116\165\001\001\000\002" +
    "\001\001\000\010\107\216\111\u019c\112\217\001\001\000" +
    "\002\001\001\000\014\011\u019e\032\174\033\160\107\210" +
    "\116\165\001\001\000\002\001\001\000\014\011\u01a0\032" +
    "\174\033\160\107\210\116\165\001\001\000\002\001\001" +
    "\000\014\011\u01a2\032\174\033\160\107\210\116\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\u01a7\032\174\033\160\107" +
    "\210\116\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\056\u01ad\061\003\062\010\001\001\000\004\010\u01ae" +
    "\001\001\000\006\036\u01af\102\u01b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u01b4\001\001\000\100" +
    "\010\107\012\103\013\140\014\110\015\125\016\137\017" +
    "\133\020\111\023\156\025\127\026\150\027\141\055\134" +
    "\056\007\061\003\062\010\065\u01b5\066\145\072\112\073" +
    "\146\074\105\100\142\101\147\104\155\106\130\107\132" +
    "\110\104\114\152\115\116\117\123\120\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\061\067\u01b7\070\063\071\062\077\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\061\067\u01bb\070\063\071\062\077\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\072\001\001\000\004\103\u01c1\001" +
    "\001\000\002\001\001\000\014\036\u01af\040\u0145\041\u0125" +
    "\042\u0143\102\u01ce\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\061\067\u01c6\070\063\071\062\077\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\100\010" +
    "\107\012\103\013\140\014\110\015\125\016\137\017\133" +
    "\020\111\023\156\025\127\026\150\027\141\055\134\056" +
    "\007\061\003\062\010\065\u01c9\066\145\072\112\073\146" +
    "\074\105\100\142\101\147\104\155\106\130\107\132\110" +
    "\104\114\152\115\116\117\123\120\117\001\001\000\002" +
    "\001\001\000\004\057\u01cb\001\001\000\002\001\001\000" +
    "\030\007\047\010\037\055\042\056\036\060\u01cd\061\003" +
    "\062\010\063\044\064\046\075\051\076\045\001\001\000" +
    "\002\001\001\000\004\103\u01cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static Ast padre;
public int cont = 0;
public static List<String> ListaErroresSintacticos = new ArrayList<String>();

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        ListaErroresSintacticos.add("ERROR SINTACTICO, Error en la Línea " + (s.right) +" Columna "+(s.left+1) +". Identificador "
        +s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        ListaErroresSintacticos.add("ERROR SINTACTICO, Error en la Línea " + (s.right) +" Columna "+(s.left+1) +". Identificador "
        +s.value + " no reconocido.");
        /*System.out.println("Error en la Línea " + (s.right)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");*/
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // LISTPARAMETROSLLAMADA ::= EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	LinkedList<Exp> lista = new LinkedList<Exp>();
	lista.add((Exp)n1);
	RESULT=lista;
    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*LISTPARAMETROSLLAMADA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LISTPARAMETROSLLAMADA ::= LISTPARAMETROSLLAMADA coma EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		LinkedList<Exp> lista = (LinkedList<Exp>) n1;
		lista.add((Exp)n2);   
		RESULT = lista;             
    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*LISTPARAMETROSLLAMADA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // LLAMADA ::= identificador parizq parder pcoma 
            {
              Object RESULT = null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                RESULT= new Llamada((String)ni,new LinkedList<Exp>(),niright);
        
              CUP$parser$result = new java_cup.runtime.Symbol(66/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // LLAMADA ::= identificador parizq LISTPARAMETROSLLAMADA parder pcoma 
            {
              Object RESULT = null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT= new Llamada((String)ni,(LinkedList<Exp>)n1,niright);
    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // LLAMADAEXP ::= identificador parizq parder 
            {
              Object RESULT = null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT= new Llamada((String)ni,new LinkedList<Exp>(),niright);
        
              CUP$parser$result = new java_cup.runtime.Symbol(69/*LLAMADAEXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // LLAMADAEXP ::= identificador parizq LISTPARAMETROSLLAMADA parder 
            {
              Object RESULT = null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT= new Llamada((String)ni,(LinkedList<Exp>)n1,niright);
    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*LLAMADAEXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // T ::= identificador 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Tipo((String)n1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // T ::= rvoid 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.VOID);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // T ::= booleano 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.BOOLEAN);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // T ::= character 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.CHAR);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // T ::= cadenaString 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.STRING);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // T ::= doble 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.DOUBLE);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // T ::= entero 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.INT);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*T*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPOSPOSIBLES ::= parizq character parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.CHAR);
              CUP$parser$result = new java_cup.runtime.Symbol(25/*TIPOSPOSIBLES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPOSPOSIBLES ::= parizq doble parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Tipo(Tipos.DOUBLE);
              CUP$parser$result = new java_cup.runtime.Symbol(25/*TIPOSPOSIBLES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPOSPOSIBLES ::= parizq entero parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo(Tipos.INT);
              CUP$parser$result = new java_cup.runtime.Symbol(25/*TIPOSPOSIBLES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPRESIONCASTEO ::= TIPOSPOSIBLES EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT= new Casteo((Tipo)n1,(Exp)n2,n1right);
	
              CUP$parser$result = new java_cup.runtime.Symbol(24/*EXPRESIONCASTEO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // LISTACORCHETESVALOR ::= corcheteizq EXP corcheteder 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Exp> lista = new LinkedList<Exp>();
	lista.add((Exp)n2);
	RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LISTACORCHETESVALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // LISTACORCHETESVALOR ::= LISTACORCHETESVALOR corcheteizq EXP corcheteder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n1;
	lista.add((Exp)n2);
	RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(29/*LISTACORCHETESVALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // INSTANCIAS ::= identificador parizq parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		LinkedList<Exp> lista = new LinkedList<Exp>();
		RESULT=new InstanciaClase(new Tipo((String)n1),lista,n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*INSTANCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // INSTANCIAS ::= identificador parizq LISTPARAMETROSLLAMADA parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new InstanciaClase(new Tipo((String)n1),(LinkedList<Exp>)n2,n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*INSTANCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // INSTANCIAS ::= T LISTACORCHETESVALOR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= new Instancia((Tipo)n1,(LinkedList<Exp>)n2,n2right);
              CUP$parser$result = new java_cup.runtime.Symbol(27/*INSTANCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AUXILIAR ::= identificador LISTACORCHETESVALOR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new AccesoArreglo(new Identificador((String)n1+"|arreglo",n1right),(LinkedList<Exp>)n2,n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(72/*AUXILIAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AUXILIAR ::= LLAMADAEXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(72/*AUXILIAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // AUXILIAR ::= identificador 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= new Identificador((String)n+"|variable",nright);
              CUP$parser$result = new java_cup.runtime.Symbol(72/*AUXILIAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ACCESO ::= AUXILIAR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = new LinkedList<Exp>();
		lista.add((Exp)n1);
		RESULT = lista;
	
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ACCESO ::= ACCESO punto AUXILIAR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n1;
		lista.add((Exp)n2);
		RESULT=lista;
		
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ACCESO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CASTEOEXPLICITO ::= tochar parizq EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ToChar((Exp)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(76/*CASTEOEXPLICITO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CASTEOEXPLICITO ::= toint parizq EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ToInt((Exp)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(76/*CASTEOEXPLICITO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CASTEOEXPLICITO ::= todouble parizq EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ToDouble((Exp)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(76/*CASTEOEXPLICITO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CASTEOEXPLICITO ::= caststr parizq EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Str((Exp)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(76/*CASTEOEXPLICITO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXP ::= LLAMADAEXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXP ::= este 
            {
              Object RESULT = null;
		RESULT = new This();
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXP ::= LLAMADAEXP punto ACCESO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		LinkedList<Exp> lista = (LinkedList<Exp>)n2;
		lista.add((Exp)n1);
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);

		RESULT =new Acceso(lista,nright);
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXP ::= este punto ACCESO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		LinkedList<Exp> lista = (LinkedList<Exp>)n1;
		lista.add((Exp) new This());
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);

		RESULT =new Acceso(lista,nright);
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXP ::= identificador LISTACORCHETESVALOR punto ACCESO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		LinkedList<Exp> lista = (LinkedList<Exp>)n3;
		lista.add((Exp)new AccesoArreglo(new Identificador((String)n1+"|arreglo",n1right),(LinkedList<Exp>)n2,n1right));
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);

		RESULT =new Acceso(lista,nright);  
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXP ::= identificador punto ACCESO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n2;
		lista.add((Exp) new Identificador((String)n1+"|variable",nright));
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);
		RESULT= new Acceso(lista,nright); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXP ::= CASTEOEXPLICITO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXP ::= EXPRESIONCASTEO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXP ::= leerarchivo parizq EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LeerArchivo((Exp)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXP ::= identificador LISTACORCHETESVALOR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new AccesoArreglo(new Identificador((String)n1+"|arreglo",n1right),(LinkedList<Exp>)n2,n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXP ::= parizq EXP parder EXP 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXP ::= nuevo INSTANCIAS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= n1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXP ::= identificador 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Identificador((String)n1+"|variable",n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXP ::= parizq EXP parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXP ::= falso 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Literal(false, new Tipo(Tipos.BOOLEAN),n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXP ::= verdadero 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Literal(true, new Tipo(Tipos.BOOLEAN),n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXP ::= decimal 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Literal(n1, new Tipo(Tipos.DOUBLE),n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXP ::= cadena 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		String cad = (String)n1;
		cad=cad.substring(1, cad.length()-1);
		RESULT = new Literal(cad, new Tipo(Tipos.STRING),n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXP ::= caracter 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Literal(n1.replaceAll("'", ""), new Tipo(Tipos.CHAR),n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXP ::= numero 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Literal(n1, new Tipo(Tipos.INT),n1right);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXP ::= decremento identificador 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new OpPrefijoSuma(new Identificador((String)n1+"|variable",n1right),false,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXP ::= aumento identificador 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new OpPrefijoSuma(new Identificador((String)n1+"|variable",n1right),true,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXP ::= identificador decremento 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new OpPostfijo(new Identificador((String)n1+"|variable",n1right),false,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXP ::= identificador aumento 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new OpPostfijo(new Identificador((String)n1+"|variable",n1right),true,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXP ::= potencia parizq EXP coma EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aritmeticas((Exp)n1,(Exp)n2,Operacion.Operador.POTENCIA,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXP ::= nulo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Null();
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXP ::= menos EXP 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
   		RESULT = new OpPrefijo((Exp)n1,Operacion.Operador.MENOSU,nright);            
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXP ::= not EXP 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
          RESULT = new OpPrefijo((Exp)n1,Operacion.Operador.NOT,nright);         
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP ::= EXP mayorigual EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
       RESULT = new Relacionales((Exp)n1,(Exp)n2,Operacion.Operador.MAYORIGUAL,nright);              
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXP ::= EXP menorigual EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
       RESULT = new Relacionales((Exp)n1,(Exp)n2,Operacion.Operador.MENORIGUAL,nright);              
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP ::= EXP menor EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
       RESULT = new Relacionales((Exp)n1,(Exp)n2,Operacion.Operador.MENOR,nright);             
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXP ::= EXP or EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT = new Logicas((Exp)n1,(Exp)n2,Operacion.Operador.OR,nright);        
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP ::= EXP and EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT = new Logicas((Exp)n1,(Exp)n2,Operacion.Operador.AND,nright);         
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXP ::= EXP xor EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Logicas((Exp)n1,(Exp)n2,Operacion.Operador.XOR,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXP ::= EXP interrogacion EXP dospuntos EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new Ternario((Exp)n2,(Exp)n3,(Exp)n1,nright);
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXP ::= EXP diferente EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT = new Relacionales((Exp)n1,(Exp)n2,Operacion.Operador.DIFERENTE,nright);             
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXP ::= EXP igualacion EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT = new Relacionales((Exp)n1,(Exp)n2,Operacion.Operador.IGUALACION,nright);             
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXP ::= EXP mayor EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT = new Relacionales((Exp)n1,(Exp)n2,Operacion.Operador.MAYOR,nright);        
    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXP ::= EXP mod EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Aritmeticas((Exp)n1,(Exp)n2,Operacion.Operador.MOD,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXP ::= EXP div EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Aritmeticas((Exp)n1,(Exp)n2,Operacion.Operador.DIV,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXP ::= EXP por EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Aritmeticas((Exp)n1,(Exp)n2,Operacion.Operador.POR,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXP ::= EXP menos EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Aritmeticas((Exp)n1,(Exp)n2,Operacion.Operador.MENOS,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP ::= EXP mas EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Aritmeticas((Exp)n1,(Exp)n2,Operacion.Operador.MAS,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*EXP*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ACCESOIZQ ::= este punto ACCESO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n2;
		lista.add((Exp) new This());
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);
		RESULT = new AccesoIzq(lista,nright);
		
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ACCESOIZQ*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ACCESOIZQ ::= este punto ACCESO igual EXP 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n2;
		lista.add((Exp) new This());
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);
		RESULT= new AsignacionAcceso(new AccesoIzq(lista,nright),(Exp)n3,nright);
		
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ACCESOIZQ*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCESOIZQ ::= LLAMADAEXP punto ACCESO 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ACCESOIZQ*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ACCESOIZQ ::= identificador punto ACCESO igual EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n2;
		lista.add((Exp) new Identificador((String)n1+"|variable",nright));
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);
		RESULT= new AsignacionAcceso(new AccesoIzq(lista,nright),(Exp)n3,nright);  
		
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ACCESOIZQ*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ACCESOIZQ ::= identificador punto ACCESO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Exp> lista = (LinkedList<Exp>)n2;
		lista.add((Exp) new Identificador((String)n1+"|variable",nright));
		Exp aux = lista.getLast();
		lista.removeLast();
		lista.addFirst(aux);
		RESULT= new AccesoIzq(lista,nright); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ACCESOIZQ*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNACION ::= identificador LISTACORCHETESVALOR igual EXP pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
 	RESULT = new AsignacionArreglo(new Identificador((String)n1+"|arreglo",n1right),(LinkedList<Exp>)n2,(Exp)n3,n1right);
 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNACION ::= identificador igual EXP pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
 	RESULT = new Asignacion(new Identificador((String)n1+"|variable",n1right),(Exp)n2,n1right);
 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LISTCORCHETES ::= corcheteizq corcheteder 
            {
              Object RESULT = null;
		
int contador = 1;
RESULT=contador;
              CUP$parser$result = new java_cup.runtime.Symbol(28/*LISTCORCHETES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LISTCORCHETES ::= LISTCORCHETES corcheteizq corcheteder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
int contador = (int)n1 + 1;
RESULT= contador;
              CUP$parser$result = new java_cup.runtime.Symbol(28/*LISTCORCHETES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LEXPRESIONES ::= EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodon> lista = new LinkedList<Nodon>();
lista.add(new Nodon(Nodon.etiquetaNodo.HOJA,(Exp)n1));
RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(38/*LEXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LEXPRESIONES ::= LEXPRESIONES coma EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodon> lista = (LinkedList<Nodon>)n1;
lista.add(new Nodon(Nodon.etiquetaNodo.HOJA,(Exp)n2));
RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(38/*LEXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LEXPRESIONES1 ::= 
            {
              Object RESULT = null;
		LinkedList<Exp> lista= new LinkedList<Exp>();
RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LEXPRESIONES1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LEXPRESIONES1 ::= LEXPRESIONES 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Nodon n = new Nodon((LinkedList<Nodon>)n1,Nodon.etiquetaNodo.INTERIOR);
RESULT = n;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*LEXPRESIONES1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTARREGLO ::= llaveabre LCONTARREGLO llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Nodon n = new Nodon((LinkedList<Nodon>)n1,Nodon.etiquetaNodo.INTERIOR);
	RESULT=n;
	
              CUP$parser$result = new java_cup.runtime.Symbol(36/*CONTARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTARREGLO ::= llaveabre LEXPRESIONES1 llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
RESULT = n1;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*CONTARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LCONTARREGLO ::= error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(35/*LCONTARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LCONTARREGLO ::= LCONTARREGLO error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(35/*LCONTARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LCONTARREGLO ::= CONTARREGLO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodon> lista = new LinkedList<Nodon>();
lista.add((Nodon)n1);
RESULT = lista;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*LCONTARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LCONTARREGLO ::= LCONTARREGLO coma CONTARREGLO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
LinkedList<Nodon> lista = (LinkedList<Nodon>) n1;
lista.add((Nodon)n2);
RESULT = lista;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*LCONTARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPARREGLO ::= LEXPRESIONES1 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OPARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPARREGLO ::= LCONTARREGLO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(34/*OPARREGLO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INITARRAY ::= llaveabre OPARREGLO llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(n1 instanceof List){
		Nodon n = new Nodon((LinkedList<Nodon>)n1,Nodon.etiquetaNodo.INTERIOR);
		RESULT = n;	
	}else{
		RESULT = n1;
	}
              CUP$parser$result = new java_cup.runtime.Symbol(26/*INITARRAY*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VARINIT ::= INITARRAY 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = (Exp)n1;
              CUP$parser$result = new java_cup.runtime.Symbol(33/*VARINIT*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VARINIT ::= EXP 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= (Exp)n1;
              CUP$parser$result = new java_cup.runtime.Symbol(33/*VARINIT*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VARDECID ::= identificador 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= (String)n1;
              CUP$parser$result = new java_cup.runtime.Symbol(32/*VARDECID*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VARDECID ::= identificador LISTCORCHETES 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Arreglo((int)n2,(String)n1);
              CUP$parser$result = new java_cup.runtime.Symbol(32/*VARDECID*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VARDEC ::= VARDECID 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
if(n1 instanceof String){
Var v = new Var((String)n1,null);
RESULT=v;	
}else{
	Arreglo arr = (Arreglo)n1;
	Var v = new Var((String)arr.getId(),null,(int)arr.getDimensiones());
	RESULT = v;
}

              CUP$parser$result = new java_cup.runtime.Symbol(31/*VARDEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARDEC ::= VARDECID igual VARINIT 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	if(n1 instanceof String){
		Var v = new Var((String)n1,(Exp)n2);
		RESULT=v;
	}else{
		Arreglo arr = (Arreglo)n1;
		Var v = new Var((String)arr.getId(),(Exp)n2,(int)arr.getDimensiones());
		RESULT = v;
	}


              CUP$parser$result = new java_cup.runtime.Symbol(31/*VARDEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VAR ::= error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VAR ::= VAR error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VAR ::= VARDEC 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
LinkedList<Var> lista = new LinkedList<Var>();
lista.add((Var)n1);
RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(30/*VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VAR ::= VAR coma VARDEC 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
LinkedList<Var> lista = (LinkedList<Var>)n1;
lista.add((Var)n2);
RESULT = lista;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECMETODO ::= T VAR pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Declaracion((Tipo)n1, (LinkedList<Var>)n2,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(63/*DECMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DEC ::= T VAR pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	LinkedList<Modificador> lista = new LinkedList<Modificador>();
	Modificador mod = new Modificador(Modificador.visibilidad.PUBLIC);
	lista.add(mod);
	RESULT = new DeclaracionGlobal(lista,(Tipo)n1, (LinkedList<Var>)n2,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*DEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DEC ::= LMODIFICADORES T VAR pcoma 
            {
              Object RESULT = null;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new DeclaracionGlobal((LinkedList<Modificador>)n3,(Tipo)n1, (LinkedList<Var>)n2,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*DEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PR ::= printtabla parizq parder pcoma 
            {
              Object RESULT = null;
		
		RESULT = new PrintTabla();
	
              CUP$parser$result = new java_cup.runtime.Symbol(8/*PR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IMPRIMIR ::= imprimirconlinea parizq EXP parder pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = new Print((Exp) n1,true,nright);
			
              CUP$parser$result = new java_cup.runtime.Symbol(10/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IMPRIMIR ::= imprimir parizq EXP parder pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = new Print((Exp) n1,false,nright);
			
              CUP$parser$result = new java_cup.runtime.Symbol(10/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONTINUAR ::= continuar pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Continue(nright);

              CUP$parser$result = new java_cup.runtime.Symbol(19/*CONTINUAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BREAK ::= quiebre pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Break(nright);

              CUP$parser$result = new java_cup.runtime.Symbol(12/*BREAK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MIENTRAS ::= mientras parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new While((LinkedList<Nodo>)n2,(Exp)n1,nright);
			
              CUP$parser$result = new java_cup.runtime.Symbol(11/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPPOSTFIJOS ::= identificador LISTACORCHETESVALOR decremento pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new OpPostfijoArreglos(new Identificador((String)n1+"|arreglo",nright),(LinkedList<Exp>)n2,false,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*OPPOSTFIJOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPPOSTFIJOS ::= identificador LISTACORCHETESVALOR aumento pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new OpPostfijoArreglos(new Identificador((String)n1+"|arreglo",nright),(LinkedList<Exp>)n2,true,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*OPPOSTFIJOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPPOSTFIJOS ::= identificador decremento pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new OpPostfijo(new Identificador((String)n1+"|variable",nright),false,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*OPPOSTFIJOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPPOSTFIJOS ::= identificador aumento pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new OpPostfijo(new Identificador((String)n1+"|variable",nright),true,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(13/*OPPOSTFIJOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SINO ::= sino llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = n2;
            
              CUP$parser$result = new java_cup.runtime.Symbol(15/*SINO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPCIONSI ::= sino si parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               LinkedList<If> listaif= new LinkedList<If>();
                listaif.add(new If((Exp)n1,(LinkedList<Nodo>)n2,nright));
                RESULT = listaif;
             
              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPCIONSI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPCIONSI ::= OPCIONSI sino si parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	LinkedList<If>listaif = (LinkedList<If>) n1;
	listaif.add(new If((Exp)n2,(LinkedList<Nodo>)n3,nright));
	RESULT = listaif;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OPCIONSI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SI ::= si parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra SINO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new If((Exp)n1,(LinkedList<Nodo>)n2,(LinkedList<Nodo>)n3,nright);
    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*SI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SI ::= si parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra OPCIONSI SINO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
       RESULT = new ElseIfElse((Exp)n1,(LinkedList<Nodo>)n2,(LinkedList<Nodo>)n3,(LinkedList<Nodo>)n4,nright);         

              CUP$parser$result = new java_cup.runtime.Symbol(14/*SI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SI ::= si parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra OPCIONSI 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new ElseIf((Exp)n1,(LinkedList<Nodo>)n2,(LinkedList<Nodo>)n3,nright);

              CUP$parser$result = new java_cup.runtime.Symbol(14/*SI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SI ::= si parizq EXP parder llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new If((Exp)n1,(LinkedList<Nodo>)n2,nright);

              CUP$parser$result = new java_cup.runtime.Symbol(14/*SI*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAINIT ::= ASIGNACION 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = n1;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*PARAINIT*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAINIT ::= DEC 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = n1;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*PARAINIT*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARA ::= para parizq PARAINIT EXP pcoma EXP parder llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new For((Ins)n1,(Exp)n2,(Exp)n3,(LinkedList<Nodo>)n4,nright);

              CUP$parser$result = new java_cup.runtime.Symbol(17/*PARA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DOWHILE ::= hacer llaveabre LCONTENIDOMETODO llavecierra mientras parizq EXP parder pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT = new DoWhile((Exp)n2,(LinkedList<Nodo>)n1,nright);

              CUP$parser$result = new java_cup.runtime.Symbol(20/*DOWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BLOQUESWITCHSIMPLE ::= defecto dospuntos LCONTENIDOMETODO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Defecto((LinkedList<Nodo>)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(23/*BLOQUESWITCHSIMPLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BLOQUESWITCHSIMPLE ::= caso EXP dospuntos LCONTENIDOMETODO 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Casos((Exp)n1,(LinkedList<Nodo>)n2,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(23/*BLOQUESWITCHSIMPLE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BLOQUESWITCHST ::= BLOQUESWITCHSIMPLE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Ins> lista = new LinkedList<Ins>();
	lista.add((Ins)n1);
	RESULT = lista;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*BLOQUESWITCHST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BLOQUESWITCHST ::= BLOQUESWITCHST BLOQUESWITCHSIMPLE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Ins> lista = (LinkedList<Ins>)n1;
	lista.add((Ins)n2);
	RESULT = lista;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*BLOQUESWITCHST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH ::= seleccion parizq EXP parder llaveabre BLOQUESWITCHST llavecierra 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Switch((Exp)n1,(LinkedList<Ins>)n2,nright);

              CUP$parser$result = new java_cup.runtime.Symbol(21/*SWITCH*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RETORNO ::= retorno pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(null,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(68/*RETORNO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETORNO ::= retorno EXP pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno((Exp)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(68/*RETORNO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARACADA ::= para parizq PARAM dospuntos EXP parder llaveabre LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new ForEach((Parametro)n1,(Exp)n2,(LinkedList<Nodo>)n4,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(70/*PARACADA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GRAFICAR ::= graficar parizq EXP coma EXP parder pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		RESULT= new Graficar((Exp)n1,(Exp)n2,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(75/*GRAFICAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESCRIBIRARCHIVO ::= escribirarchivo parizq EXP coma EXP parder 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT= new EscribirArchivo((Exp)n1,(Exp)n2,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(77/*ESCRIBIRARCHIVO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LECTURACONSOLA ::= leer parizq identificador parder pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		RESULT= new LeerConsola(new Identificador((String)n1+"|variable",nright),nright);
		
              CUP$parser$result = new java_cup.runtime.Symbol(78/*LECTURACONSOLA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS ::= RETORNO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS ::= LECTURACONSOLA 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIAS ::= ESCRIBIRARCHIVO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS ::= GRAFICAR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS ::= ACCESOIZQ pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= PARACADA 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS ::= LLAMADA 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS ::= DOWHILE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS ::= SWITCH 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS ::= PARA 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= CONTINUAR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= SI 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= OPPOSTFIJOS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= BREAK 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= MIENTRAS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= IMPRIMIR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= ASIGNACION 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= PR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= DECMETODO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NOMBREOBJETO ::= superior parizq LISTPARAMETROSLLAMADA parder pcoma 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT = new Super((LinkedList<Exp>)n1,nright);
	
              CUP$parser$result = new java_cup.runtime.Symbol(58/*NOMBREOBJETO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDOMETODO ::= NOMBREOBJETO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(62/*CONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDOMETODO ::= NATIVAS 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(62/*CONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDOMETODO ::= SENTENCIAS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(62/*CONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDOMETODO ::= CLASE 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(62/*CONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LCONTENIDOMETODO ::= error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LCONTENIDOMETODO ::= CONTENIDOMETODO error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCONTENIDOMETODO ::= CONTENIDOMETODO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodo> lista = new LinkedList<Nodo>();
			if(n1 instanceof Ins){
				lista.add((Ins)n1);
			}else if(n1 instanceof Exp){
				lista.add((Exp)n1);
			}
			
			RESULT = lista;
				
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LCONTENIDOMETODO ::= LCONTENIDOMETODO CONTENIDOMETODO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodo> lista = (LinkedList<Nodo>) n1;
				if(n2 instanceof Ins){
					lista.add((Ins)n2);
				}else if(n2 instanceof Exp){
					lista.add((Exp)n2);
				}
				
				RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(52/*LCONTENIDOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCONTENIDOMETODO1 ::= llavecierra 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(51/*LCONTENIDOMETODO1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCONTENIDOMETODO1 ::= LCONTENIDOMETODO llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Sentencias((LinkedList<Nodo>)n1,nright);
              CUP$parser$result = new java_cup.runtime.Symbol(51/*LCONTENIDOMETODO1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAM ::= T VARDECID 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	if(n2 instanceof String){
		RESULT= new Parametro((Tipo)n1,(String)n2);		
	}else{
		RESULT= new Parametro((Tipo)n1,(Arreglo)n2);
	}

              CUP$parser$result = new java_cup.runtime.Symbol(55/*PARAM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROS ::= rfinal PARAM 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		Parametro param = (Parametro)n1;
	param.setParamfinal(true);
	RESULT = param;
	
              CUP$parser$result = new java_cup.runtime.Symbol(54/*PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROS ::= PARAM 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(54/*PARAMETROS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LPARAMETROS ::= PARAMETROS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Parametro> lista = new LinkedList<Parametro>();
	lista.add((Parametro)n1);
	RESULT=lista;
	
              CUP$parser$result = new java_cup.runtime.Symbol(61/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LPARAMETROS ::= LPARAMETROS coma PARAMETROS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Parametro> lista = (LinkedList<Parametro>)n1;
	lista.add((Parametro)n2);
	RESULT = lista;
	
              CUP$parser$result = new java_cup.runtime.Symbol(61/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LPARAMETROS1 ::= 
            {
              Object RESULT = null;
		LinkedList<Parametro> lista = new LinkedList<Parametro>();
	RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(53/*LPARAMETROS1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LPARAMETROS1 ::= LPARAMETROS 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(53/*LPARAMETROS1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONSTRUCTOR ::= identificador parizq LPARAMETROS1 parder llaveabre LCONTENIDOMETODO1 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT= new Constructor(new Tipo(Tipo.Tipos.VOID),(String)n2,(LinkedList<Parametro>)n3,(Sentencias)n4,new LinkedList<Modificador>(),(int)n2right);
	
              CUP$parser$result = new java_cup.runtime.Symbol(50/*CONSTRUCTOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONSTRUCTOR ::= LMODIFICADORES identificador parizq LPARAMETROS1 parder llaveabre LCONTENIDOMETODO1 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT= new Constructor(new Tipo(Tipo.Tipos.VOID),(String)n2,(LinkedList<Parametro>)n3,(Sentencias)n4,(LinkedList<Modificador>)n1,(int)n2right);
	
              CUP$parser$result = new java_cup.runtime.Symbol(50/*CONSTRUCTOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCIONMETODO ::= pcoma 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(65/*OPCIONMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCIONMETODO ::= llaveabre LCONTENIDOMETODO1 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(65/*OPCIONMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENCABEZADOMETODO ::= LISTCORCHETES identificador parizq LPARAMETROS1 parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new EncabezadoMetodo((String)n2,(LinkedList<Parametro>)n3,(int)n1);
              CUP$parser$result = new java_cup.runtime.Symbol(64/*ENCABEZADOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENCABEZADOMETODO ::= identificador parizq LPARAMETROS1 parder 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new EncabezadoMetodo((String)n1,(LinkedList<Parametro>)n2,0);
              CUP$parser$result = new java_cup.runtime.Symbol(64/*ENCABEZADOMETODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO ::= T ENCABEZADOMETODO OPCIONMETODO 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		EncabezadoMetodo encabezado = (EncabezadoMetodo)n3;
	LinkedList<Modificador> lista = new LinkedList<Modificador>();
	lista.add(new Modificador(Modificador.visibilidad.PUBLIC));
	RESULT= new Metodo(lista,(LinkedList<Parametro>)encabezado.getParametros(),(int)encabezado.getDimensiones(),(Sentencias)n4,(Tipo)n2,(String)encabezado.getIdentificador(),(int)n2right);
	
              CUP$parser$result = new java_cup.runtime.Symbol(60/*METODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO ::= arroba sobreescribir LMODIFICADORES T ENCABEZADOMETODO OPCIONMETODO 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(60/*METODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODO ::= LMODIFICADORES T ENCABEZADOMETODO OPCIONMETODO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	EncabezadoMetodo encabezado = (EncabezadoMetodo)n3;
	RESULT= new Metodo((LinkedList<Modificador>)n1,(LinkedList<Parametro>)encabezado.getParametros(),(int)encabezado.getDimensiones(),(Sentencias)n4,(Tipo)n2,(String)encabezado.getIdentificador(),(int)n2right);
	
              CUP$parser$result = new java_cup.runtime.Symbol(60/*METODO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPOCLASE ::= DEC 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(49/*CUERPOCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPOCLASE ::= CONSTRUCTOR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(49/*CUERPOCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPOCLASE ::= METODO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(49/*CUERPOCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPOCLASE ::= CLASE 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(49/*CUERPOCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOCLASE ::= CUERPOCLASE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodo> lista = new LinkedList<Nodo>();
			if(n1 instanceof Ins){
				lista.add((Ins)n1);
			}else if(n1 instanceof Exp){
				lista.add((Exp)n1);
			}
			
			RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CONTENIDOCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOCLASE ::= CONTENIDOCLASE CUERPOCLASE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodo> lista = (LinkedList<Nodo>) n1;
				if(n2 instanceof Ins){
					lista.add((Ins)n2);
				}else if(n2 instanceof Exp){
					lista.add((Exp)n2);
				}
				
				RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CONTENIDOCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCIONESCLASE ::= llavecierra 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(46/*OPCIONESCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPCIONESCLASE ::= CONTENIDOCLASE llavecierra 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(46/*OPCIONESCLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TMODIFICADORES ::= abstracto 
            {
              Object RESULT = null;
		RESULT = new Modificador(Modificador.Modificadores.ABSTRACT);
              CUP$parser$result = new java_cup.runtime.Symbol(48/*TMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TMODIFICADORES ::= rfinal 
            {
              Object RESULT = null;
		RESULT = new Modificador(Modificador.Modificadores.FINAL);
              CUP$parser$result = new java_cup.runtime.Symbol(48/*TMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TMODIFICADORES ::= estatico 
            {
              Object RESULT = null;
		RESULT = new Modificador(Modificador.Modificadores.STATIC);
              CUP$parser$result = new java_cup.runtime.Symbol(48/*TMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TMODIFICADORES ::= protegido 
            {
              Object RESULT = null;
		RESULT= new Modificador(Modificador.visibilidad.PROTECTED);
              CUP$parser$result = new java_cup.runtime.Symbol(48/*TMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TMODIFICADORES ::= privado 
            {
              Object RESULT = null;
		RESULT= new Modificador(Modificador.visibilidad.PRIVATE);
              CUP$parser$result = new java_cup.runtime.Symbol(48/*TMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TMODIFICADORES ::= publico 
            {
              Object RESULT = null;
		RESULT= new Modificador(Modificador.visibilidad.PUBLIC);
              CUP$parser$result = new java_cup.runtime.Symbol(48/*TMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MODIFICADORES ::= TMODIFICADORES 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Modificador> lista = new LinkedList<Modificador>();
	lista.add((Modificador)n1);
	RESULT =lista;
              CUP$parser$result = new java_cup.runtime.Symbol(47/*MODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MODIFICADORES ::= MODIFICADORES TMODIFICADORES 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Modificador> lista = (LinkedList<Modificador>)n1;
	lista.add((Modificador)n2);
	RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(47/*MODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LMODIFICADORES ::= MODIFICADORES 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(44/*LMODIFICADORES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXTENDER ::= 
            {
              Object RESULT = null;
		String n = "";
RESULT=n;
              CUP$parser$result = new java_cup.runtime.Symbol(45/*EXTENDER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXTENDER ::= extender identificador 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT= n1;
              CUP$parser$result = new java_cup.runtime.Symbol(45/*EXTENDER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASE ::= clase identificador EXTENDER llaveabre OPCIONESCLASE 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
LinkedList<Modificador> lista = new LinkedList<Modificador>();
RESULT= new Clase((String)n2,lista,(String)n3,(LinkedList<Nodo>)n4,n2right);
	
              CUP$parser$result = new java_cup.runtime.Symbol(43/*CLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE ::= LMODIFICADORES clase identificador EXTENDER llaveabre OPCIONESCLASE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Clase((String)n2,(LinkedList<Modificador> )n1,(String)n3,(LinkedList<Nodo>)n4,n2right);
              CUP$parser$result = new java_cup.runtime.Symbol(43/*CLASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTAR ::= importar cadena pcoma 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Importar((String)n1);
              CUP$parser$result = new java_cup.runtime.Symbol(42/*IMPORTAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COLINE ::= CLASE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(41/*COLINE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COLINE ::= IMPORTAR 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(41/*COLINE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOCONLINE ::= error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(40/*CUERPOCONLINE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPOCONLINE ::= CUERPOCONLINE error 
            {
              Object RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(40/*CUERPOCONLINE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPOCONLINE ::= COLINE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	LinkedList<Nodo> lista = new LinkedList<Nodo>();
		lista.add((Nodo)n1);
	RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*CUERPOCONLINE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOCONLINE ::= CUERPOCONLINE COLINE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)n1;
	lista.add((Nodo)n2);
	RESULT=lista;
	
              CUP$parser$result = new java_cup.runtime.Symbol(40/*CUERPOCONLINE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CUERPOCONLINE 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=n1;
              CUP$parser$result = new java_cup.runtime.Symbol(39/*INICIO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // D ::= INICIO 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<Nodo> lista = (LinkedList<Nodo>)n1;
		parser.padre = new Ast(lista);
		RESULT = lista;
              CUP$parser$result = new java_cup.runtime.Symbol(1/*D*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= D EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

